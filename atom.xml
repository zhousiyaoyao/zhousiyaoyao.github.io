<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZEUS ZHOU</title>
  
  <subtitle>Stay Hungry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zeuszhou.xyz/"/>
  <updated>2020-07-02T03:25:13.235Z</updated>
  <id>zeuszhou.xyz/</id>
  
  <author>
    <name>ZEUS ZHOU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在快手实习结束</title>
    <link href="zeuszhou.xyz/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%86%99%E5%9C%A8%E5%BF%AB%E6%89%8B%E5%AE%9E%E4%B9%A0%E7%BB%93%E6%9D%9F/"/>
    <id>zeuszhou.xyz/个人总结/写在快手实习结束/</id>
    <published>2020-07-02T02:13:09.000Z</published>
    <updated>2020-07-02T03:25:13.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天是2020年7月2号，早上一起来发现kim号没了，心情非常之开心，终于可以放一个月假了。</p><h3 id="做了什么"><a href="#做了什么" class="headerlink" title="做了什么"></a>做了什么</h3><p>因为所在的部门是个孵化项目，加上前端人手很少（只有我和另外一个实习生），在这期间承担了很多的工作：</p><ul><li>五一活动页面</li><li>CMS后台的迁移及新需求开发</li><li>电量中心开发</li><li>引流页面开发</li></ul><h3 id="学到了什么"><a href="#学到了什么" class="headerlink" title="学到了什么"></a>学到了什么</h3><p>技术方面，2个月以来，平均每天commit超过5次（如果自己的github能这么勤奋就好了科科），学会了react hooks，<br>typescript，熟悉了umi全家桶，css的使用也更加熟练，大量的实践让我对之前不太理解的理论知识有了更深刻的认识。<br>在引流页面开发上，自己协调资源完成了代码编写-配置CICD打包镜像-上线-域名配置-多个中台联调-微信后台配置等一系列工作。<br>代码规范方面也得到了改善。</p><p>业务方面，我了解到与人沟通的重要性。刚刚入职时，我以为做技术遇到的挑战会来自于完成某个功能，然鹅实际上，我发现配合和<br>沟通才是更加重要的，如何与pm，ui，后台，中台，mentor，运营沟通，减少沟通成本，减少信息不对称，沟通不到位的情况。<br>曾经花了2个礼拜，协调后台，中台，微信后台，运维等各方资源来做需求，结果最后刚刚调通，却被pm砍掉了需求，真是造化弄人，这个教训告诉我，<br>沟通的重要性，弄清楚的需求再下手，而不是只听mentor的一句话。</p><h3 id="遇到的屏颈"><a href="#遇到的屏颈" class="headerlink" title="遇到的屏颈"></a>遇到的屏颈</h3><ol><li>业务和项目不复杂，相似的功能做多了，也没有想着尝试新的方法重新实现，陷入了舒适圈，有时候感觉自己就是个无情的切图机器</li><li>没有时间（有时候也不想）来反思或者优化项目，review code也是浮于表面</li><li>他人的代码读的不多，对best practice了解较少</li><li>代码抽象也做的不够，没有花时间对已完成的项目进行重构，切完这个项目又换下一个项目，最多时候手上三个项目切换着做</li><li>没有特长，这一点是最致命的，什么都会一些，但都不够精</li><li>相关的源码也没有花时间去细细钻研，只是在一个会用的阶段</li><li>没有接触到前端工程化，可视化，监控，服务端渲染，前端基础建设等等领域，只是一直在写页面</li></ol><h3 id="总结的解决方法"><a href="#总结的解决方法" class="headerlink" title="总结的解决方法"></a>总结的解决方法</h3><ol><li>加入一个前端大组，多review他人的code，多尝试新的实现思路</li><li>多考虑代码的简洁性，健壮性，可读性和抽象</li><li>抓紧放假的一个月时间，对vue的源码进行研读，最好可以react和vue对比着看</li><li>找到自己前端领域感兴趣的点，然后进行钻研，要有一个和别人不一样的地方</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天是2020年7月2号，早上一起来发现kim号没了，心情非常之开心，终于可以放一个月假了。&lt;/p&gt;
&lt;h3 id=&quot;做了什么&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="个人总结" scheme="zeuszhou.xyz/categories/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="个人总结" scheme="zeuszhou.xyz/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>计网安全操作系统面试题总结(长期更新)</title>
    <link href="zeuszhou.xyz/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%BD%91%E5%AE%89%E5%85%A8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>zeuszhou.xyz/面试/计网安全操作系统面试题总结/</id>
    <published>2020-06-25T06:53:07.000Z</published>
    <updated>2020-06-27T03:35:31.897Z</updated>
    
    <content type="html"><![CDATA[<ol><li>TCP连接和断开</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;TCP连接和断开&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试" scheme="zeuszhou.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="zeuszhou.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端算法面经题总结（长期更新）</title>
    <link href="zeuszhou.xyz/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E9%9D%A2%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>zeuszhou.xyz/面试/前端算法面经题总结（长期更新）/</id>
    <published>2020-06-24T14:34:07.000Z</published>
    <updated>2020-06-30T06:36:15.790Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-二叉树路径总和"><a href="#1-二叉树路径总和" class="headerlink" title="1. 二叉树路径总和"></a>1. 二叉树路径总和</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回bool 112</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val == sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pathSum(root.left, sum - root.val) || pathSum(root.right, sum - root.val) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回二维数组 113</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    help(root, sum, res, [])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">help</span>(<span class="params">root, sum, res, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(root.val)</span><br><span class="line">    <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span> &amp;&amp; root.val === sum) &#123;</span><br><span class="line">        res.push([...arr])</span><br><span class="line">    &#125;</span><br><span class="line">    help(root.left, sum - root.val, res, arr)</span><br><span class="line">    help(root.right, sum - root.val, res, arr)</span><br><span class="line">    arr.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-第K个最大元素"><a href="#2-第K个最大元素" class="headerlink" title="2. 第K个最大元素"></a>2. 第K个最大元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分查找与快排partition结合，o(n)</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> high = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = partition(nums, low, high)</span><br><span class="line">        <span class="keyword">if</span> (mid === k<span class="number">-1</span>) <span class="keyword">return</span> nums[mid]</span><br><span class="line">        mid &lt; k<span class="number">-1</span> ? low = mid + <span class="number">1</span> : high = mid - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> partition = <span class="function">(<span class="params">arr, start, end</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pivot = arr[start]</span><br><span class="line">  <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">      <span class="keyword">while</span>(arr[end] &gt;= pivot &amp;&amp; start &lt; end)&#123;</span><br><span class="line">          end--</span><br><span class="line">      &#125;</span><br><span class="line">      arr[start] = arr[end]</span><br><span class="line">      <span class="keyword">while</span>(arr[start] &lt; pivot &amp;&amp; start &lt; end)&#123;</span><br><span class="line">          start++</span><br><span class="line">      &#125;</span><br><span class="line">      arr[end] = arr[start]</span><br><span class="line">  &#125;</span><br><span class="line">  arr[start] = pivot</span><br><span class="line">  <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-合并多个有序数组"><a href="#3-合并多个有序数组" class="headerlink" title="3. 合并多个有序数组"></a>3. 合并多个有序数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 归并排序的变体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(arr.length === <span class="number">1</span>) <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> child = arr.splice(<span class="number">0</span>,<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    arr = merge(arr)</span><br><span class="line">    <span class="keyword">let</span> res=[], ci=<span class="number">0</span>, ai=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (ci &lt; child.length &amp;&amp; ai &lt; arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span> (child[ci] &lt; arr[ai])&#123;</span><br><span class="line">            res.push(child[ci++])</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child[ci] == arr[ai])&#123;</span><br><span class="line">            res.push(child[ci++])</span><br><span class="line">            ai++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push(arr[ai++])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span>(ci &lt; child.length)&#123;</span><br><span class="line">        res.push(child[ci++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ai &lt; arr.length)&#123;</span><br><span class="line">        res.push(arr[ai++])</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(res))<span class="comment">//去重</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-硬币找零问题"><a href="#4-硬币找零问题" class="headerlink" title="4. 硬币找零问题"></a>4. 硬币找零问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[n] = min(dp[n],dp[n-coin1] + 1，dp[n-coin2],...) 金额为n时，硬币数等于(n-coin)+1中所需硬币最少的组合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coinChange</span> (<span class="params">coins,amount</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(amount+<span class="number">1</span>).fill(<span class="literal">Infinity</span>);</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> path = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; coins.length; j++)&#123;</span><br><span class="line">          <span class="keyword">let</span> n = i - coins[j];</span><br><span class="line">          <span class="keyword">if</span>(n &gt;= <span class="number">0</span> &amp;&amp; dp[n]+<span class="number">1</span> &lt; dp[i])&#123;</span><br><span class="line">            dp[i] = dp[n]+<span class="number">1</span>;</span><br><span class="line">            path[i] = coins[j];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sum = path[amount];</span><br><span class="line">  <span class="keyword">let</span> res = [sum];</span><br><span class="line">  amount = amount - sum;</span><br><span class="line">  <span class="keyword">while</span>(amount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      sum = path[amount];</span><br><span class="line">      res.push(sum);</span><br><span class="line">      amount = amount - sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">coinChange([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="5-二叉树翻转"><a href="#5-二叉树翻转" class="headerlink" title="5. 二叉树翻转"></a>5. 二叉树翻转</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    [root.left, root.right] = [root.right, root.left]</span><br><span class="line">    root.left = invertTree(root.left)</span><br><span class="line">    root.right = invertTree(root.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代DFS</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [root]</span><br><span class="line">    <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> cur = stack.pop()</span><br><span class="line">        <span class="keyword">if</span>(cur === <span class="literal">null</span>) <span class="keyword">continue</span></span><br><span class="line">        [cur.left, cur.right] = [cur.right, cur.left]</span><br><span class="line">        stack.push(cur.right)</span><br><span class="line">        stack.push(cur.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代BFS</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> cur = queue.pop()</span><br><span class="line">        <span class="keyword">if</span>(cur === <span class="literal">null</span>) <span class="keyword">continue</span></span><br><span class="line">        [cur.left, cur.right] = [cur.right, cur.left]</span><br><span class="line">        queue.unshift(cur.left);</span><br><span class="line">        queue.unshift(cur.right);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-复原IP地址"><a href="#6-复原IP地址" class="headerlink" title="6. 复原IP地址"></a>6. 复原IP地址</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> restoreIpAddresses = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">s, last, segments</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(segments === <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length &lt;= <span class="number">3</span> &amp;&amp; <span class="built_in">parseInt</span>(s.slice(<span class="number">0</span>,<span class="number">3</span>)) &lt;= <span class="number">255</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.length &gt;= <span class="number">2</span> &amp;&amp; s.charAt(<span class="number">0</span>) === <span class="string">"0"</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> item = last.concat(s)</span><br><span class="line">                result.push(item)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(segments &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> item = last.concat(s.slice(<span class="number">0</span>,<span class="number">1</span>)).concat(<span class="string">"."</span>)</span><br><span class="line">            helper(s.slice(<span class="number">1</span>), item, segments+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) != <span class="string">"0"</span>)&#123;</span><br><span class="line">                item = last.concat(s.slice(<span class="number">0</span>,<span class="number">2</span>)).concat(<span class="string">"."</span>)</span><br><span class="line">                helper(s.slice(<span class="number">2</span>), item, segments+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">parseInt</span>(s.slice(<span class="number">0</span>,<span class="number">3</span>)) &lt;= <span class="number">255</span>)&#123;</span><br><span class="line">                    item = last.concat(s.slice(<span class="number">0</span>,<span class="number">3</span>)).concat(<span class="string">"."</span>)</span><br><span class="line">                    helper(s.slice(<span class="number">3</span>), item, segments+<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    helper(s, <span class="string">""</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7. 归并排序"></a>7. 归并排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = array.length</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(array) || length === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(length === <span class="number">1</span>) <span class="keyword">return</span> array</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>(length &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> left = array.slice(<span class="number">0</span>, mid)</span><br><span class="line">    <span class="keyword">let</span> right = array.slice(mid, length)</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">leftArray, rightArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> leftLength = leftArray.length</span><br><span class="line">    <span class="keyword">let</span> rightLength = rightArray.length</span><br><span class="line">    <span class="keyword">let</span> il = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> ir = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(il &lt; leftLength &amp;&amp; ir &lt; rightLength)&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftArray[il] &lt; rightArray[ir])&#123;</span><br><span class="line">            result.push(leftArray[il++])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(rightArray[ir++])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(il &lt; leftLength)&#123;</span><br><span class="line">        result.push(leftArray[il++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ir &lt; rightLength)&#123;</span><br><span class="line">        result.push(rightArray[ir++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-手写桶排序"><a href="#8-手写桶排序" class="headerlink" title="8. 手写桶排序"></a>8. 手写桶排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">array, size = <span class="number">10</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(...array)</span><br><span class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...array)</span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">Math</span>.floor((max - min) / size) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> buckets = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        buckets.push([])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> array)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">Math</span>.floor((v-min) / size)</span><br><span class="line">        buckets[num].push(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(bucket <span class="keyword">of</span> buckets)&#123;</span><br><span class="line">        result.push(...quickSort(bucket))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-买卖股票"><a href="#9-买卖股票" class="headerlink" title="9. 买卖股票"></a>9. 买卖股票</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能操作一次，贪心</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxProfit</span>(<span class="params">prices</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> small = prices[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> n = prices.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        small = min(prices[i], small)</span><br><span class="line">        <span class="keyword">if</span> (max &lt; prices[i] - small)&#123;</span><br><span class="line">            max = prices[i] -small</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以多次操作，累计贪心</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> profit = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prices[i + <span class="number">1</span>] &gt; prices[i]) profit += prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> profit;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="10-快排和三路快排"><a href="#10-快排和三路快排" class="headerlink" title="10. 快排和三路快排"></a>10. 快排和三路快排</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通快排</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array, start, end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = array.length</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(array) || length &lt;= <span class="number">1</span> || start &gt;= end) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> index = partition(array, start, end)</span><br><span class="line">    quickSort(array, start, index<span class="number">-1</span>)</span><br><span class="line">    quickSort(array, index+<span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span> = (<span class="params">arr, start, end</span>) =&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pivot = arr[start]</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[end] &gt;= pivot &amp;&amp; start &lt; end)&#123;</span><br><span class="line">            end--</span><br><span class="line">        &#125;</span><br><span class="line">        arr[start] = arr[end]</span><br><span class="line">        <span class="keyword">while</span>(arr[start] &lt; pivot &amp;&amp; start &lt; end)&#123;</span><br><span class="line">            start++</span><br><span class="line">        &#125;</span><br><span class="line">        arr[end] = arr[start]</span><br><span class="line">    &#125;</span><br><span class="line">    arr[start] = pivot</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当数据量大或者重复数据多时，三路快排</span></span><br><span class="line"><span class="comment">// 其他优化比如随机选取base，配合使用插入排序</span></span><br><span class="line"><span class="keyword">const</span> partition3way = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> end = arr.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> pivot = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> swap = <span class="function">(<span class="params">a, i, j</span>) =&gt;</span> [a[i], a[j]] = [a[j], a[i]]</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot)&#123;</span><br><span class="line">            swap(arr, start++, i++)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; pivot)&#123;</span><br><span class="line">            swap(arr, i, end--)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-判断回文数"><a href="#11-判断回文数" class="headerlink" title="11. 判断回文数"></a>11. 判断回文数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( x &lt; <span class="number">0</span> ) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    x = <span class="built_in">String</span>(x)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=x.length; i&lt;len/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( x[i] != x[len - i <span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="12-js实现栈-两个栈实现一个队列"><a href="#12-js实现栈-两个栈实现一个队列" class="headerlink" title="12. js实现栈 + 两个栈实现一个队列"></a>12. js实现栈 + 两个栈实现一个队列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = []</span><br><span class="line">    <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        items.push(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[items.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length === <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(items.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现队列</span></span><br><span class="line"><span class="keyword">var</span> stack1 = <span class="keyword">new</span> Stack()</span><br><span class="line"><span class="keyword">var</span> stack2 = <span class="keyword">new</span> Stack()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    stack1.push(node)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stack1.isEmpty() &amp;&amp; stack2.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Queue is empty"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">            stack2.push(stack1.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack2.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-二分查找"><a href="#14-二分查找" class="headerlink" title="14. 二分查找"></a>14. 二分查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search1</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = left + <span class="built_in">Math</span>.floor((right - left) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] === target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左分界版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search2</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = left + <span class="built_in">Math</span>.floor((right - left) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] === target)&#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右分界版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search3</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = nums.length</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = left + <span class="built_in">Math</span>.floor((right - left) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] === target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-数组，和大于等于n的连续最短子序列"><a href="#15-数组，和大于等于n的连续最短子序列" class="headerlink" title="15. 数组，和大于等于n的连续最短子序列"></a>15. 数组，和大于等于n的连续最短子序列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span>(<span class="params">s, nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> ans = <span class="literal">Infinity</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">        sum += nums[j]</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= s)&#123;</span><br><span class="line">            ans = <span class="built_in">Math</span>.min(ans, j - i + <span class="number">1</span>)</span><br><span class="line">            sum -= nums[i]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans === <span class="literal">Infinity</span> ? <span class="number">0</span> : ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-树的遍历"><a href="#16-树的遍历" class="headerlink" title="16. 树的遍历"></a>16. 树的遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 广度优先遍历，用queue</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">var</span> queue = []</span><br><span class="line">    queue.push(node)</span><br><span class="line">    <span class="keyword">while</span>(queue.length !== <span class="number">0</span>)&#123;</span><br><span class="line">        node = queue.shift()</span><br><span class="line">        <span class="built_in">console</span>.log(node.value)</span><br><span class="line">        <span class="keyword">if</span>(node.left) queue.push(node.left)</span><br><span class="line">        <span class="keyword">if</span>(node.right) queue.push(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度优先遍历之前中后递归遍历，递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(node.value)</span><br><span class="line">        preOrder(node.left)</span><br><span class="line">        preOrder(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度优先遍历之双色球非递归遍历，顺序和正常的相反，用栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preorderTraversal</span> = <span class="title">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">var</span> stack = []</span><br><span class="line">    stack.push(&#123;<span class="attr">color</span>: <span class="string">"white"</span>, <span class="attr">node</span>: node&#125;)</span><br><span class="line">    whiel(stack.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> &#123;color, node&#125; = stack.pop()</span><br><span class="line">        <span class="keyword">if</span>(color === <span class="string">"gray"</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(node.value)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.right)&#123;</span><br><span class="line">                stack.push(&#123;<span class="attr">color</span>: <span class="string">"white"</span>, <span class="attr">node</span>: node.right&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left)&#123;</span><br><span class="line">                stack.push(&#123; <span class="attr">color</span>: <span class="string">'white'</span>, <span class="attr">node</span>: node.left &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(&#123;<span class="attr">color</span>: <span class="string">'gray'</span>, node&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Morris，空间1，时间N，索引二叉树</span></span><br><span class="line"><span class="keyword">var</span> morrisInorder = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">var</span> cur1 = head</span><br><span class="line">    <span class="keyword">var</span> cur2 = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(cur1)&#123;</span><br><span class="line">        cur2 = cur1.left</span><br><span class="line">        <span class="keyword">if</span>(cur2)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur2.right &amp;&amp; cur2.right !== cur1)&#123;</span><br><span class="line">                cur2 = cur2.right</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!cur2.right)&#123;</span><br><span class="line">                cur2.right = cur1</span><br><span class="line">                cur1 = cur1.left</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur2.right = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(cur1.value)</span><br><span class="line">    cur1 = cur1.right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17-判断链表环的位置"><a href="#17-判断链表环的位置" class="headerlink" title="17. 判断链表环的位置"></a>17. 判断链表环的位置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有无环</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fast = head</span><br><span class="line">    <span class="keyword">var</span> slow = head</span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        slow = slow.next</span><br><span class="line">        <span class="keyword">if</span>( fast === slow)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 环的入口位置</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fast = head</span><br><span class="line">    <span class="keyword">var</span> slow = head</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        slow = slow.next</span><br><span class="line">        <span class="keyword">if</span>(fast === slow)&#123;</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            fast = fast.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="18-手写双向链表-有增加，移除，插入的功能"><a href="#18-手写双向链表-有增加，移除，插入的功能" class="headerlink" title="18. 手写双向链表,有增加，移除，插入的功能"></a>18. 手写双向链表,有增加，移除，插入的功能</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoubleLinklist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">DoubleLinklist.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tail = newNode</span><br><span class="line">        <span class="keyword">this</span>.head = newNode</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        newNode.prev = <span class="keyword">this</span>.tail <span class="comment">// pre连上tail</span></span><br><span class="line">        <span class="keyword">this</span>.tail.next = newNode <span class="comment">// tail连上pre</span></span><br><span class="line">        <span class="keyword">this</span>.tail = newNode <span class="comment">// tail变成newNode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">DoubleLinklist.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head.next.prev = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position === <span class="keyword">this</span>.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev.next = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">this</span>.tail.prev</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span>(index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">                current = current.next</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            current.next.prev = current.prev</span></span><br><span class="line"><span class="xml">            current.prev.next = current.next</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    this.length -= 1</span></span><br><span class="line"><span class="xml">    return current.data</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">DoubleLinklist.prototype.insert = (position, data) =&gt;&#123;</span></span><br><span class="line"><span class="xml">    if(position <span class="tag">&lt; <span class="attr">0</span> || <span class="attr">position</span> &gt;</span> this.length) return false</span></span><br><span class="line"><span class="xml">    let newNode = new Node(data)</span></span><br><span class="line"><span class="xml">    if(this.length === 0)&#123;</span></span><br><span class="line"><span class="xml">        this.head = newNode</span></span><br><span class="line"><span class="xml">        this.tail = newNode</span></span><br><span class="line"><span class="xml">    &#125;else&#123;</span></span><br><span class="line"><span class="xml">        if(position === 0)&#123;</span></span><br><span class="line"><span class="xml">            this.head.prev = newNode</span></span><br><span class="line"><span class="xml">            newNode.next = this.head</span></span><br><span class="line"><span class="xml">            this.head = newNode</span></span><br><span class="line"><span class="xml">        &#125;else if(position === this.length)&#123;</span></span><br><span class="line"><span class="xml">            this.tail.next = newNode</span></span><br><span class="line"><span class="xml">            newNode.prev = this.tail</span></span><br><span class="line"><span class="xml">            this.tail = newNode</span></span><br><span class="line"><span class="xml">        &#125;else&#123;</span></span><br><span class="line"><span class="xml">            let current = this.head</span></span><br><span class="line"><span class="xml">            let index = 0</span></span><br><span class="line"><span class="xml">            while(index++ <span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">                current = current.next</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            newNode.next = current</span></span><br><span class="line"><span class="xml">            newNode.prev = current.prev</span></span><br><span class="line"><span class="xml">            current.prev.next = newNode</span></span><br><span class="line"><span class="xml">            current.prev = newNode</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    this.length += 1</span></span><br><span class="line"><span class="xml">    return true</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="19-二叉树最大深度"><a href="#19-二叉树最大深度" class="headerlink" title="19. 二叉树最大深度"></a>19. 二叉树最大深度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(maxDepth(root.left), maxDepth(root.right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代，队列，每下一层，level + 1</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root, level = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length</span><br><span class="line">        <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">            <span class="keyword">let</span> first = queue.shift()</span><br><span class="line">            <span class="keyword">if</span>(first.left)&#123;</span><br><span class="line">                queue.push(first.left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(first.right)&#123;</span><br><span class="line">                queue.push(first.right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        level++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20-leetcode394-字符串解码"><a href="#20-leetcode394-字符串解码" class="headerlink" title="20. leetcode394.字符串解码"></a>20. leetcode394.字符串解码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decodeString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = []</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">var</span> multi = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;  i&lt; s.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/[0-9]/</span>.test(s[i]))&#123;</span><br><span class="line">            multi = multi * <span class="number">10</span> + <span class="built_in">parseInt</span>(s[i])</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i] === <span class="string">'['</span>)&#123;</span><br><span class="line">            stack.push(&#123;<span class="attr">multi1</span>: multi, <span class="attr">res1</span>: res&#125;)</span><br><span class="line">            res = <span class="string">""</span></span><br><span class="line">            multi = <span class="number">0</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i] === <span class="string">']'</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> &#123;multi1, res1&#125; = stack.pop()</span><br><span class="line">            res = res1 + res.repeat(multi1)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res += s[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21-leetcode200-岛屿数量，不同的是要求出每个岛屿的面积"><a href="#21-leetcode200-岛屿数量，不同的是要求出每个岛屿的面积" class="headerlink" title="21. leetcode200.岛屿数量，不同的是要求出每个岛屿的面积"></a>21. leetcode200.岛屿数量，不同的是要求出每个岛屿的面积</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="keyword">const</span> numIslands = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] === <span class="string">'1'</span>)&#123;</span><br><span class="line">                count++</span><br><span class="line">                turnZero(i, j, grid)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">turnZero</span>(<span class="params">i, j, grid</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= grid.length || j &lt; <span class="number">0</span></span><br><span class="line">    || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] === <span class="string">'0'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    grid[i][j] = <span class="string">'0'</span></span><br><span class="line">    turnZero(i, j+<span class="number">1</span>, grid)</span><br><span class="line">    turnZero(i, j<span class="number">-1</span>, grid)</span><br><span class="line">    turnZero(i+<span class="number">1</span>, j, grid)</span><br><span class="line">    turnZero(i<span class="number">-1</span>, j, grid)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">const</span> numIslands = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] === <span class="string">'1'</span>)&#123;</span><br><span class="line">                count++</span><br><span class="line">                grid[i][j] = <span class="string">'0'</span></span><br><span class="line">                queue.push([i,j])</span><br><span class="line">                turnZero(queue, grid)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">turnZero</span>(<span class="params">queue, grid</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dirs = [[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">-1</span>], [<span class="number">-1</span>,<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">        <span class="keyword">const</span> cur = queue.shift()</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> dir <span class="keyword">of</span> dirs)&#123;</span><br><span class="line">            <span class="keyword">const</span> x = cur[<span class="number">0</span>] + dir[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">const</span> y = cur[<span class="number">1</span>] + dir[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= grid.length || y &lt; <span class="number">0</span> || y &gt;= grid[<span class="number">0</span>].length || grid[x][y] !== <span class="string">'1'</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            grid[x][y] = <span class="string">'0'</span></span><br><span class="line">            queue.push([x,y])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-算法：翻转数组，不可以用reverse，要在原数组上修改"><a href="#23-算法：翻转数组，不可以用reverse，要在原数组上修改" class="headerlink" title="23. 算法：翻转数组，不可以用reverse，要在原数组上修改"></a>23. 算法：翻转数组，不可以用reverse，要在原数组上修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = a.length; i &lt; (len - <span class="number">1</span>)/<span class="number">2</span>; i++)&#123;</span><br><span class="line">    b = a[i];</span><br><span class="line">    a[i] = a[len - i - <span class="number">1</span>];</span><br><span class="line">    a[len - i - <span class="number">1</span>] = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24-算法：合并区间"><a href="#24-算法：合并区间" class="headerlink" title="24. 算法：合并区间"></a>24. 算法：合并区间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> res = [intervals[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[res.length<span class="number">-1</span>][<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">            res[res.length<span class="number">-1</span>][<span class="number">1</span>] = <span class="built_in">Math</span>.max(res[res.length<span class="number">-1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(intervals[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25-求最多有多少点在同一条直线上"><a href="#25-求最多有多少点在同一条直线上" class="headerlink" title="25. 求最多有多少点在同一条直线上"></a>25. 求最多有多少点在同一条直线上</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxPoints = <span class="function"><span class="keyword">function</span>(<span class="params">points</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(points.length &lt; <span class="number">3</span>) <span class="keyword">return</span> points.length</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> gradient = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> same = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> p1 = points[i]</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        same = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">            <span class="keyword">const</span> p2 = points[j]</span><br><span class="line">            <span class="keyword">let</span> dx = p1[<span class="number">0</span>] - p2[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">let</span> dy = p1[<span class="number">1</span>] - p2[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">const</span> g = gcd(dx, dy)</span><br><span class="line">            <span class="keyword">if</span>(g !== <span class="number">0</span>) &#123;</span><br><span class="line">                dx /= g</span><br><span class="line">                dy /= g</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((dy === <span class="number">0</span>) &amp;&amp; (dx === <span class="number">0</span>)) &#123;</span><br><span class="line">                same++</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(dx === <span class="number">0</span>) &#123;</span><br><span class="line">                    gradient = <span class="literal">Infinity</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dy === <span class="number">0</span>) dx = <span class="number">1</span></span><br><span class="line">                    gradient = <span class="string">`<span class="subst">$&#123;dx&#125;</span>,<span class="subst">$&#123;dy&#125;</span>`</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> temp = map.get(gradient)</span><br><span class="line">                <span class="keyword">if</span>(temp === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    temp = <span class="number">2</span></span><br><span class="line">                &#125; <span class="keyword">else</span> temp += <span class="number">1</span></span><br><span class="line">                map.set(gradient, temp)</span><br><span class="line">                <span class="keyword">if</span>(temp &gt; count) count = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count === <span class="number">0</span>) &#123;</span><br><span class="line">            ans = <span class="built_in">Math</span>.max(ans, same + <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">Math</span>.max(ans, same + count)</span><br><span class="line">        &#125;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b === <span class="number">0</span>) <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="26-剑指offer38题"><a href="#26-剑指offer38题" class="headerlink" title="26. 剑指offer38题"></a>26. 剑指offer38题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> backtrack = <span class="function"><span class="keyword">function</span>(<span class="params">res, path, nums</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length === <span class="number">0</span>)&#123;</span><br><span class="line">            res.push(path)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            backtrack(res, path.concat([nums[i]]), nums.slice(<span class="number">0</span>,i).concat(nums.slice(i+<span class="number">1</span>,nums.length)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = []</span><br><span class="line">    backtrack(res,[],nums)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="27-链表中奇数为递增排序-偶数为递减排序-要求返回一个递增的链表"><a href="#27-链表中奇数为递增排序-偶数为递减排序-要求返回一个递增的链表" class="headerlink" title="27. 链表中奇数为递增排序 偶数为递减排序 要求返回一个递增的链表"></a>27. 链表中奇数为递增排序 偶数为递减排序 要求返回一个递增的链表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitLinkList</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> odd = node</span><br><span class="line">    <span class="keyword">var</span> even = node.next</span><br><span class="line">    <span class="keyword">var</span> oddCur = node</span><br><span class="line">    <span class="keyword">var</span> evenCur = node.next</span><br><span class="line">    <span class="keyword">while</span>(oddCur != <span class="literal">null</span> || evenCur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(oddCur.next != <span class="literal">null</span> &amp;&amp; oddCur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            oddCur.next = oddCur.next.next</span><br><span class="line">            oddCur = oddCur.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            oddCur.next = <span class="literal">null</span></span><br><span class="line">            oddCur = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(evenCur.next != <span class="literal">null</span> &amp;&amp; evenCur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            evenCur.next = evenCur.next.next</span><br><span class="line">            evenCur = evenCur.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            evenCur.next = <span class="literal">null</span></span><br><span class="line">            evenCur = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [odd, even]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseLinkList</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur = node</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = cur.next</span><br><span class="line">        cur.next = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeList</span>(<span class="params">head1, head2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head1 === <span class="literal">null</span> || head2 === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head1 === <span class="literal">null</span> ? head2 : head1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> head = head1.value &lt; head2.value ? head1 : head2</span><br><span class="line">    <span class="keyword">var</span> cur1 = head === head1 ? head1 : head2</span><br><span class="line">    <span class="keyword">var</span> cur2 = head === head1 ? head2 : head1</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(cur1 != <span class="literal">null</span> &amp;&amp; cur2 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur1.value &lt;= cur2.value)&#123;</span><br><span class="line">            pre = cur1</span><br><span class="line">            cur1 = cur1.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next = cur2.next</span><br><span class="line">            pre.next = cur2</span><br><span class="line">            cur2.next = cur1</span><br><span class="line">            pre = cur2</span><br><span class="line">            cur2 = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = cur1 === <span class="literal">null</span> ? cur2 : cur1</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> [odd, even] = splitLinkList(node)</span><br><span class="line"><span class="keyword">return</span> mergeList(odd, reverseLinkList(even))</span><br></pre></td></tr></table></figure><h4 id="28-求最大公约数和最小公倍数"><a href="#28-求最大公约数和最小公倍数" class="headerlink" title="28. 求最大公约数和最小公倍数"></a>28. 求最大公约数和最小公倍数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a &lt; b)&#123; <span class="comment">// 默认a大于b</span></span><br><span class="line">    swap(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(b === <span class="number">0</span>) <span class="keyword">return</span> a</span><br><span class="line">  <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log((a*b)/gcd(a,b)) <span class="comment">//最小公倍数=两数的乘积/最大公约数</span></span><br></pre></td></tr></table></figure><h4 id="29-寻找两个二叉树节点的第一个公共父节点"><a href="#29-寻找两个二叉树节点的第一个公共父节点" class="headerlink" title="29. 寻找两个二叉树节点的第一个公共父节点"></a>29. 寻找两个二叉树节点的第一个公共父节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span> || root === p || root === q)&#123; </span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125; <span class="comment">// 遇到p，q或者null就返回</span></span><br><span class="line">  <span class="keyword">let</span> left = lowestCommonAncestor(root.left, p, q)</span><br><span class="line">  <span class="keyword">let</span> right = lowestCommonAncestor(root.right, p, q)</span><br><span class="line">  <span class="keyword">if</span>(left &amp;&amp; right)&#123;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125; <span class="comment">// 左右递归都有结果，说明在左右子树，直接返回父节点</span></span><br><span class="line">  <span class="keyword">return</span> left ? left : right <span class="comment">// 如果只有一边有结果，说明pq都在这颗树上，返回调用结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="30-爬楼梯"><a href="#30-爬楼梯" class="headerlink" title="30. 爬楼梯"></a>30. 爬楼梯</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="31-二叉树先序中序，生成后序"><a href="#31-二叉树先序中序，生成后序" class="headerlink" title="31. 二叉树先序中序，生成后序"></a>31. 二叉树先序中序，生成后序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preorder.length === <span class="number">0</span> || inorder.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">var</span> index = inorder.indexOf(preorder[<span class="number">0</span>])</span><br><span class="line">    root.left = buildTree(preorder.slice(<span class="number">1</span>,index+<span class="number">1</span>), inorder.slice(<span class="number">0</span>,index))</span><br><span class="line">    root.right = buildTree(preorder.slice(index+<span class="number">1</span>), inorder.slice(index+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32-最大子序和"><a href="#32-最大子序和" class="headerlink" title="32. 最大子序和"></a>32. 最大子序和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length - <span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.max(nums[i], nums[i] + dp[i<span class="number">-1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...dp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="33-最长无重复子串"><a href="#33-最长无重复子串" class="headerlink" title="33. 最长无重复子串"></a>33. 最长无重复子串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">window</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(right &lt; s.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> c1 = s[right]</span><br><span class="line">        <span class="built_in">window</span>[c1] ? <span class="built_in">window</span>[c1]++ : <span class="built_in">window</span>[c1] = <span class="number">1</span></span><br><span class="line">        right++</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">window</span>[c1] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> c2 = s[left]</span><br><span class="line">            <span class="built_in">window</span>[c2]--</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">Math</span>.max(res, right - left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="34-盛最多水的容器"><a href="#34-盛最多水的容器" class="headerlink" title="34. 盛最多水的容器"></a>34. 盛最多水的容器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = height.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">var</span> left = height[i]</span><br><span class="line">        <span class="keyword">var</span> right = height[j]</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">var</span> area = left * (j - i)</span><br><span class="line">            i++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> area = right * (j - i)</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(area &gt; max)&#123;</span><br><span class="line">            max = area</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="35-K个一组反转链表"><a href="#35-K个一组反转链表" class="headerlink" title="35. K个一组反转链表"></a>35. K个一组反转链表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseList</span>(<span class="params">start, end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = start</span><br><span class="line">    <span class="keyword">let</span> cur = start.next</span><br><span class="line">    <span class="keyword">let</span> first = cur</span><br><span class="line">    <span class="keyword">while</span>(cur != end)&#123;</span><br><span class="line">        <span class="keyword">let</span> next = cur.next</span><br><span class="line">        cur.next = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = next</span><br><span class="line">    &#125;</span><br><span class="line">    start.next = pre</span><br><span class="line">    first.next = cur</span><br><span class="line">    <span class="keyword">return</span> first</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverseKGroup = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode()</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">let</span> start = dummy</span><br><span class="line">    <span class="keyword">let</span> end = dummy.next</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(end)&#123;</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span>(count % k === <span class="number">0</span>)&#123;</span><br><span class="line">            start = reverseList(start, end.next)</span><br><span class="line">            end = start.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = end.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="36-dom树的最大深度"><a href="#36-dom树的最大深度" class="headerlink" title="36. dom树的最大深度"></a>36. dom树的最大深度</h4><p>多叉树与二叉树的区别，left，right改成了children<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">const</span> getDepth = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!node.children || node.children.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> maxChildrenDepth = [...node.children].map(<span class="function"><span class="params">v</span> =&gt;</span> getDepth)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(...maxChildrenDepth)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(getDepth(body))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">domRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> queue = [domRoot]</span><br><span class="line">    <span class="keyword">var</span> domDepth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length</span><br><span class="line">        <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">            <span class="keyword">var</span> node = queue.shift()</span><br><span class="line">            <span class="keyword">if</span>(node.children.length)&#123;</span><br><span class="line">                node.children.forEach(<span class="function"><span class="params">x</span> =&gt;</span> queue.push(x))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        domDepth++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> domDepth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="37"><a href="#37" class="headerlink" title="37."></a>37.</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-二叉树路径总和&quot;&gt;&lt;a href=&quot;#1-二叉树路径总和&quot; class=&quot;headerlink&quot; title=&quot;1. 二叉树路径总和&quot;&gt;&lt;/a&gt;1. 二叉树路径总和&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="面试" scheme="zeuszhou.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="zeuszhou.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS手写面经题总结（长期更新）</title>
    <link href="zeuszhou.xyz/%E9%9D%A2%E8%AF%95/CSS%E6%89%8B%E5%86%99%E9%9D%A2%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>zeuszhou.xyz/面试/CSS手写面经题总结（长期更新）/</id>
    <published>2020-06-24T14:01:57.000Z</published>
    <updated>2020-06-29T14:30:13.241Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-实现-弹幕"><a href="#1-实现-弹幕" class="headerlink" title="1.实现 弹幕"></a>1.实现 弹幕</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="block"&gt;我是弹幕&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">animation</span>:barrage <span class="number">1s</span> linear <span class="number">5s</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @<span class="keyword">keyframes</span> barrage&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">      <span class="attribute">left</span>:<span class="number">100%</span>;</span><br><span class="line">      <span class="comment">/* transform:translateX(0); */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">      <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">      <span class="comment">/* transform:translateX(100%); */</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现图像旋转"><a href="#2-实现图像旋转" class="headerlink" title="2.实现图像旋转"></a>2.实现图像旋转</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-360deg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">10s</span> linear infinite</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-实现图片懒加载"><a href="#3-实现图片懒加载" class="headerlink" title="3.实现图片懒加载"></a>3.实现图片懒加载</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>).length;</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>; <span class="comment">//存储图片加载到的位置，避免每次都从第一张图片开始遍历</span></span><br><span class="line">lazyload(); <span class="comment">//页面载入完毕加载可是区域内的图片</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = lazyload;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123; <span class="comment">//监听页面滚动事件</span></span><br><span class="line">    <span class="keyword">var</span> seeHeight = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//可见区域高度</span></span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop; <span class="comment">//滚动条距离顶部高度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</span><br><span class="line">            <span class="keyword">if</span> (img[i].getAttribute(<span class="string">"src"</span>) == <span class="string">"default.jpg"</span>) &#123;</span><br><span class="line">                img[i].src = img[i].getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            n = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-实现模态框"><a href="#4-实现模态框" class="headerlink" title="4.实现模态框"></a>4.实现模态框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modal-overlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-data"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>简单的模态对话框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:overlay()"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#modal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;  <span class="comment">/*如果 left和top不设置为0，边框会有白边 */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">backgroun-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'modal-overlay'</span>);</span><br><span class="line">    el.style.visibility = (el.style.visibility == <span class="string">"visible"</span>) ? <span class="string">"hidden"</span> : <span class="string">"visible"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'modal-overlay'</span>);</span><br><span class="line">    el.style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-实现轮播图无限连接播放"><a href="#5-实现轮播图无限连接播放" class="headerlink" title="5.实现轮播图无限连接播放"></a>5.实现轮播图无限连接播放</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意最后一张img和第一张一样，所以第二轮时因为图片一样才不会闪烁 */</span></span><br><span class="line"><span class="selector-class">.photo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">9999px</span>;</span><br><span class="line"><span class="attribute">animation</span>: switch <span class="number">5s</span> ease-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> switch&#123;</span><br><span class="line">0%</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translatex</span>(0%);</span><br><span class="line">&#125;</span><br><span class="line">25%</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translatex</span>(-533px);</span><br><span class="line">&#125;</span><br><span class="line">50%</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translatex</span>(-1066px);</span><br><span class="line">&#125;</span><br><span class="line">100%</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translatex</span>(-1599px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-实现三角形且旋转"><a href="#6-实现三角形且旋转" class="headerlink" title="6.实现三角形且旋转"></a>6.实现三角形且旋转</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">2s</span> linear infinite</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-鼠标跟随和鼠标拖拽功能如何实现"><a href="#7-鼠标跟随和鼠标拖拽功能如何实现" class="headerlink" title="7.鼠标跟随和鼠标拖拽功能如何实现"></a>7.鼠标跟随和鼠标拖拽功能如何实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标拖拽</span></span><br><span class="line"><span class="comment">// client: 相当于浏览器可视区域的偏离</span></span><br><span class="line"><span class="comment">// offset: 距离鼠标点击位置的偏离</span></span><br><span class="line">  <span class="keyword">var</span> oDiv=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line">  oDiv.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> disX = ev.clientX-oDiv.offsetLeft <span class="comment">// 点击算出点击点的坐标</span></span><br><span class="line">    <span class="keyword">var</span> disY = ev.clientY-oDiv.offsetTop</span><br><span class="line">    <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> l=ev.clientX-disX <span class="comment">// 计算偏离距离</span></span><br><span class="line">      <span class="keyword">var</span> t=ev.clientY-disY</span><br><span class="line"></span><br><span class="line">      oDiv.style.left=l+<span class="string">'px'</span></span><br><span class="line">      oDiv.style.top=t+<span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">document</span>.onmouseup=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 鼠标跟随</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="built_in">parseFloat</span>(e.clientX);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="built_in">parseFloat</span>(e.clientY);</span><br><span class="line">  oDiv.style.left = x + <span class="string">'px'</span>;</span><br><span class="line">  oDiv.style.top = y + <span class="string">'px'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8-画扇形"><a href="#8-画扇形" class="headerlink" title="8.画扇形"></a>8.画扇形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sector</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-css手写一个九宫格"><a href="#9-css手写一个九宫格" class="headerlink" title="9.css手写一个九宫格"></a>9.css手写一个九宫格</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(3, 1fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 1fr);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">1%</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-4种三栏布局"><a href="#10-4种三栏布局" class="headerlink" title="10.4种三栏布局"></a>10.4种三栏布局</h4><p>绝对定位法，特点中间自适应，左右绝对定位：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer outer1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>1-left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>1-middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>1-right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer1</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer1</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer1</span> <span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer1</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flex大法好，中间自适应，flex-grow+flex-shrink+flex-basis<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer outer2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>2-left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>2-middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>2-right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer2</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer2</span> <span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer2</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浮动布局，中间要放最后，中间自适应<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer outer3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>3-left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>3-right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>3-middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer3</span> <span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer3</span> <span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer3</span> <span class="selector-class">.middle</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圣杯布局, 中间放最前面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer outer4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>圣杯-middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>圣杯-left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>圣杯-right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer4</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer4</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer4</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer</span> <span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-实现-弹幕&quot;&gt;&lt;a href=&quot;#1-实现-弹幕&quot; class=&quot;headerlink&quot; title=&quot;1.实现 弹幕&quot;&gt;&lt;/a&gt;1.实现 弹幕&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="面试" scheme="zeuszhou.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="zeuszhou.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>React面经题总结（长期更新）</title>
    <link href="zeuszhou.xyz/%E9%9D%A2%E8%AF%95/React%E9%9D%A2%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>zeuszhou.xyz/面试/React面经题总结（长期更新）/</id>
    <published>2020-06-24T13:56:55.000Z</published>
    <updated>2020-06-24T14:02:26.259Z</updated>
    
    <content type="html"><![CDATA[<ol><li>setState的原理</li><li>react生命周期</li><li>虚拟dom</li><li>diff算法</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;setState的原理&lt;/li&gt;
&lt;li&gt;react生命周期&lt;/li&gt;
&lt;li&gt;虚拟dom&lt;/li&gt;
&lt;li&gt;diff算法&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试" scheme="zeuszhou.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="zeuszhou.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS手写面经题总结（长期更新）</title>
    <link href="zeuszhou.xyz/%E9%9D%A2%E8%AF%95/JS%E6%89%8B%E5%86%99%E9%9D%A2%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>zeuszhou.xyz/面试/JS手写面经题总结/</id>
    <published>2020-06-23T09:01:43.000Z</published>
    <updated>2020-06-30T06:40:46.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JS的老生常谈手写面试题</p><h4 id="实现一个函数，每次调用返回下一个质数，要求不使用全局变量，且函数本身不接受任何参数"><a href="#实现一个函数，每次调用返回下一个质数，要求不使用全局变量，且函数本身不接受任何参数" class="headerlink" title="实现一个函数，每次调用返回下一个质数，要求不使用全局变量，且函数本身不接受任何参数"></a>实现一个函数，每次调用返回下一个质数，要求不使用全局变量，且函数本身不接受任何参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getPrime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(isPrime(count))&#123;</span><br><span class="line">      <span class="keyword">return</span> count</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> getPrime()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">      <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compose，函数式的写法和非函数式的写法"><a href="#compose，函数式的写法和非函数式的写法" class="headerlink" title="compose，函数式的写法和非函数式的写法"></a>compose，函数式的写法和非函数式的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add1 = <span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> mul3 = <span class="function">(<span class="params">x</span>) =&gt;</span> x * <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> div2 = <span class="function">(<span class="params">x</span>) =&gt;</span> x / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">x</span> =&gt;</span> fn.reduceRight(<span class="function">(<span class="params">acc,cur</span>) =&gt;</span> cur(acc), x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">parameter</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = fn.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">      parameter = fn[i](parameter)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parameter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> operate = compose(div2, mul3, add1, add1)</span><br><span class="line"><span class="built_in">console</span>.log(operate(<span class="number">0</span>)) <span class="comment">// =&gt; 相当于 div2(mul3(add1(add1(0))))</span></span><br></pre></td></tr></table></figure><h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5展开版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...thisArgs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(args.length + thisArgs.length &lt; fn.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> curry(fn, ...thisArgs.concat(args))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, thisArgs.concat(args))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> add = curry(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c)</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">1</span>)(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5紧凑版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span> (<span class="params">fn, arr = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.length === arr.length ? fn.apply(<span class="literal">null</span>, arr) : <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> curry (fn, arr.concat(args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = curry(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c)</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">1</span>)(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6一行版</span></span><br><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, arr = []</span>) =&gt;</span> fn.length === arr.length ? fn(...arr) : <span class="function">(<span class="params">...args</span>) =&gt;</span> curry(fn, [...arr, ...args])</span><br><span class="line"><span class="keyword">const</span> add = curry(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c)</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">1</span>)(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成语接龙</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wordschain</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> words = word</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">chain</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">        words += <span class="string">' -&gt; '</span> + word</span><br><span class="line">        <span class="keyword">return</span> chain</span><br><span class="line">    &#125;</span><br><span class="line">    chain.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> words</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chain</span><br><span class="line">&#125;</span><br><span class="line">wordschain(<span class="string">'胸有成竹'</span>)(<span class="string">'竹报平安'</span>)(<span class="string">'安富尊荣'</span>).valueOf()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Person.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">//this调用位置决定其词法作用域</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="keyword">this</span>.age;</span><br><span class="line">    <span class="keyword">if</span>(age &lt; <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'我还是个宝宝'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'我还是个少年'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.set(<span class="number">10</span>).get(); <span class="comment">// '我还是个少年'</span></span><br></pre></td></tr></table></figure><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span>(timeout)&#123;</span><br><span class="line">      clearTimeout(timeout)</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流三种写法"><a href="#节流三种写法" class="headerlink" title="节流三种写法"></a>节流三种写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间戳版，第一次执行，最后一次触发不执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= wait) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计时器版，第一次不执行，最后一次触发执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结合版，第一次执行，最后一次触发也执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - prev)</span><br><span class="line">    clearTimeout(timeout)</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      now = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(func, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise最大并发数限制"><a href="#Promise最大并发数限制" class="headerlink" title="Promise最大并发数限制"></a>Promise最大并发数限制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">batchGet</span>(<span class="params">arr, batchnum, fetch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> ret = []</span><br><span class="line">  <span class="keyword">let</span> executing = []</span><br><span class="line">  <span class="keyword">let</span> enqueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length === i)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> item = array[i++]</span><br><span class="line">    <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve.then(<span class="function"><span class="params">()</span> =&gt;</span> fetch(item))</span><br><span class="line">    ret.push(p)</span><br><span class="line">    <span class="keyword">let</span> e = p.then(<span class="function"><span class="params">()</span> =&gt;</span> executing.splice(executing.indexOf(e),<span class="number">1</span>))</span><br><span class="line">    executing.push(e)</span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    <span class="keyword">if</span> (executing.length &gt;= batchnum) &#123;</span><br><span class="line">      r = <span class="built_in">Promise</span>.race(executing)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r.then(<span class="function"><span class="params">()</span> =&gt;</span> enqueue())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> enqueue().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.all(ret))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.topics = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  on (event, callback) &#123;</span><br><span class="line">    <span class="keyword">this</span>.topics[event] ? <span class="keyword">this</span>.topics[event].push(callback) : <span class="keyword">this</span>.topics[event] = [callback]</span><br><span class="line">  &#125;</span><br><span class="line">  emit (event, ...args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.topics[event] &amp;&amp; <span class="keyword">this</span>.topics[event].forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(...args))</span><br><span class="line">  &#125;</span><br><span class="line">  off (event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.topics[event])&#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.topics[event]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  once (event, callback) &#123;</span><br><span class="line">    <span class="keyword">this</span>.on(event, (...args) -&gt; &#123;</span><br><span class="line">      callback(...args)</span><br><span class="line">      <span class="keyword">this</span>.off(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reduce实现map"><a href="#Reduce实现map" class="headerlink" title="Reduce实现map"></a>Reduce实现map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, cur, i</span>) =&gt;</span> &#123;</span><br><span class="line">    acc.push(callback(cur, i, arr))</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手写双向绑定"><a href="#手写双向绑定" class="headerlink" title="手写双向绑定"></a>手写双向绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"Input"</span>);</span><br><span class="line"><span class="keyword">let</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  value: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">"value"</span>, &#123;</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    text.innerHTML = val</span><br><span class="line">    input.value = val</span><br><span class="line">  &#125;,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  data.value = e.target.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>只列出了本人不熟的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce+includes</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev.includes(cur) ? prev : [...prev, cur] , []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = arr</span><br><span class="line">  <span class="keyword">var</span> len = array.length</span><br><span class="line">  array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(array[index] === array[index<span class="number">-1</span>])&#123;</span><br><span class="line">        array.splice(index,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      loop(index - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  loop(len - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter + indexOf去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty + filter去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环嵌套，splice去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] === arr[j])&#123;</span><br><span class="line">        arr.splice(j,<span class="number">1</span>)</span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> array = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!array.includes(arr[i]))&#123;</span><br><span class="line">      array.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="千分位转换"><a href="#千分位转换" class="headerlink" title="千分位转换"></a>千分位转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1234567</span></span><br><span class="line"><span class="keyword">const</span> str = num.toLocaleString()</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 1,234,567</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">var</span> c = num.toString().replace(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">'$1,'</span>);</span><br></pre></td></tr></table></figure><h4 id="中文数字金额相互转换"><a href="#中文数字金额相互转换" class="headerlink" title="中文数字金额相互转换"></a>中文数字金额相互转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中文转数字</span></span><br><span class="line"><span class="keyword">var</span> chnNumChar = &#123;</span><br><span class="line">    零:<span class="number">0</span>,</span><br><span class="line">    一:<span class="number">1</span>,</span><br><span class="line">    二:<span class="number">2</span>,</span><br><span class="line">    三:<span class="number">3</span>,</span><br><span class="line">    四:<span class="number">4</span>,</span><br><span class="line">    五:<span class="number">5</span>,</span><br><span class="line">    六:<span class="number">6</span>,</span><br><span class="line">    七:<span class="number">7</span>,</span><br><span class="line">    八:<span class="number">8</span>,</span><br><span class="line">    九:<span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> chnNameValue = &#123;</span><br><span class="line">    十:&#123;<span class="attr">value</span>:<span class="number">10</span>, <span class="attr">secUnit</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">    百:&#123;<span class="attr">value</span>:<span class="number">100</span>, <span class="attr">secUnit</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">    千:&#123;<span class="attr">value</span>:<span class="number">1000</span>, <span class="attr">secUnit</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">    万:&#123;<span class="attr">value</span>:<span class="number">10000</span>, <span class="attr">secUnit</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    亿:&#123;<span class="attr">value</span>:<span class="number">100000000</span>, <span class="attr">secUnit</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChineseToNumber</span>(<span class="params">chnStr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rtn = <span class="number">0</span> <span class="comment">// 万和亿总额</span></span><br><span class="line">  <span class="keyword">var</span> section = <span class="number">0</span> <span class="comment">// 万以下总额</span></span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">0</span> <span class="comment">// 数字</span></span><br><span class="line">  <span class="keyword">var</span> secUnit = <span class="literal">false</span> <span class="comment">// 是否是万或亿</span></span><br><span class="line">  <span class="keyword">var</span> str = chnStr.split(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = chnNumChar[str[i]]</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> num !== <span class="string">"undefined"</span>)&#123; <span class="comment">// 如果是数字</span></span><br><span class="line">      number = num</span><br><span class="line">      <span class="keyword">if</span>(i === str.length - <span class="number">1</span>)&#123; <span class="comment">// 如果最后一位是数字，直接加到section</span></span><br><span class="line">        section += number</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 如果是文字</span></span><br><span class="line">      <span class="keyword">var</span> unit = chnNameValue[str[i]].value</span><br><span class="line">      secUnit = chnNameValue[str[i]].secUnit</span><br><span class="line">      <span class="keyword">if</span>(secUnit)&#123; <span class="comment">// 如果是万或者亿</span></span><br><span class="line">        section = (section + number) * unit</span><br><span class="line">        rtn += section </span><br><span class="line">        section = <span class="number">0</span> </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">// 万以下，直接数字乘以unit</span></span><br><span class="line">        section += (number * unit)</span><br><span class="line">      &#125;</span><br><span class="line">      number = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rtn + section</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字转中文 598543</span></span><br><span class="line"><span class="keyword">const</span> toChineseNum = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = num.toString().split(<span class="string">''</span>).reverse()</span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">    <span class="keyword">var</span> number = [<span class="string">'零'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>,<span class="string">'七'</span>,<span class="string">'八'</span>,<span class="string">'九'</span>]</span><br><span class="line">    <span class="keyword">var</span> unit = [<span class="string">''</span>,<span class="string">'十'</span>,<span class="string">'百'</span>,<span class="string">'千'</span>,<span class="string">'万'</span>,<span class="string">'十'</span>,<span class="string">'百'</span>,<span class="string">'千'</span>];</span><br><span class="line">    <span class="keyword">var</span> res = []</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item !== <span class="string">'0'</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> temp = number[item] + unit[index]</span><br><span class="line">            res.push(temp)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(index &gt; <span class="number">0</span> &amp;&amp; res[<span class="number">0</span>] != <span class="string">'零'</span> &amp;&amp; res[<span class="number">0</span>] != <span class="string">'万'</span>)&#123;</span><br><span class="line">                res.length &amp;&amp; res.push(<span class="string">'零'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index === <span class="number">4</span>)&#123;</span><br><span class="line">                res.push(<span class="string">'万'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res.reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的任务队列-要求分别在-1-3-4-秒后打印出-“1”-“2”-“3”"><a href="#简单的任务队列-要求分别在-1-3-4-秒后打印出-“1”-“2”-“3”" class="headerlink" title="简单的任务队列, 要求分别在 1,3,4 秒后打印出 “1”, “2”, “3”"></a>简单的任务队列, 要求分别在 1,3,4 秒后打印出 “1”, “2”, “3”</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  event = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue.prototype.task = <span class="function"><span class="keyword">function</span>(<span class="params">time, func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.event.push(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        func()</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue.prototype.start = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.event.length; i++)&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.event[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Queue()</span><br><span class="line">    .task(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;).task(<span class="number">2000</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;).task(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;).start()</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.has(obj))&#123;</span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    res.set(obj, obj)</span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newObj = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span>)&#123;</span><br><span class="line">          newObj[i] = deepCopy(obj[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          newObj[i] = obj[i]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFSDeepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> queue = [obj]</span><br><span class="line">  <span class="keyword">const</span> temp = [newObj]</span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Set</span>([obj])</span><br><span class="line">  <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">    <span class="keyword">const</span> a = queue.shift()</span><br><span class="line">    <span class="keyword">const</span> copyObj = temp.shift()</span><br><span class="line">    <span class="built_in">Object</span>.keys(a).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = a[key]</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'Object'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited.has(item))&#123;</span><br><span class="line">          copyObj[key] = item</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          visited.add(item)</span><br><span class="line">          copyObj[key] = <span class="keyword">typeof</span> item === <span class="string">"Object"</span> ? &#123;&#125; : []</span><br><span class="line">          queue.push(item)</span><br><span class="line">          temp.push(copyObj[key])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        copyObj[key] = item</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现一个每秒输出hello-world的函数，要求第三次输出后停止，用闭包实现"><a href="#实现一个每秒输出hello-world的函数，要求第三次输出后停止，用闭包实现" class="headerlink" title="实现一个每秒输出hello world的函数，要求第三次输出后停止，用闭包实现"></a>实现一个每秒输出hello world的函数，要求第三次输出后停止，用闭包实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      count = count + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span>(count &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hello world"</span>)&#125;</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h4 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">L, R</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.__proto__ === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L.__proto__ === R.prototype)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    L = L.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组异步求和"><a href="#数组异步求和" class="headerlink" title="数组异步求和"></a>数组异步求和</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async的promise表示</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// await的promise表示</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> func()</span><br><span class="line">func().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="comment">// map的异步, 加async，map返回promise数组</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="keyword">async</span> item =&gt; item * <span class="number">2</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reduce的异步，求和，需要加上await，否则会返回[object Promise]3</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reduce(<span class="keyword">async</span> (acc, cur) =&gt; <span class="keyword">await</span> acc + cur, <span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foreach的异步</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEachSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEachSync(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item ** <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// filter的异步，筛选功能失效，因为filter的返回值匹配不是完全相等的匹配，只要是返回值能转换为true，就会被认定为通过筛选</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filterSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> filterResult = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(<span class="keyword">this</span>.map(callback))</span><br><span class="line">  <span class="comment">// &gt; [true, false, true]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function">(<span class="params">_, index</span>) =&gt;</span> filterResult[index])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filterSync(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> !== <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// some的异步</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.someSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].someSync(<span class="keyword">async</span> item =&gt; item === <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// every的异步，与some相反</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.everySync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].everySync(<span class="keyword">async</span> item =&gt; item === <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断两个数组包含关系"><a href="#判断两个数组包含关系" class="headerlink" title="判断两个数组包含关系"></a>判断两个数组包含关系</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用set</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_includes</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="keyword">new</span> <span class="built_in">Set</span>([...arr1,...arr2])</span><br><span class="line">  <span class="keyword">return</span> arr1.length === temp.size</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求交集</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.filter(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr2.includes(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(intersect(arr1, arr2) === arr1)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写一个原生ajax"><a href="#写一个原生ajax" class="headerlink" title="写一个原生ajax"></a>写一个原生ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHTTPRequest()</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">'http://www.zhengshengliang.com:9999/'</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.send(<span class="string">"username="</span>+name)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.state === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise原生实现"><a href="#Promise原生实现" class="headerlink" title="Promise原生实现"></a>Promise原生实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.value = <span class="literal">undefined</span></span><br><span class="line">  self.reason = <span class="literal">undefined</span></span><br><span class="line">  self.status = <span class="string">"pending"</span></span><br><span class="line">  self.resolveCallback = []</span><br><span class="line">  self.rejectCallback = []</span><br><span class="line">  functionr resolve(value)&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'resolved'</span></span><br><span class="line">      self.resolveCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        fn()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(self.status === <span class="string">"pending"</span>)&#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">"rejected"</span></span><br><span class="line">      self.rejectCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        fn()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  executor(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">myPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span>(self.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">    resolve(self.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(self.status === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">    reject(self.reason)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(self.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">    self.resolveCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(self.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    self.rejectCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      reject(self.reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function">(<span class="params">(n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.has(n))&#123;</span><br><span class="line">      <span class="keyword">return</span> map.get(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line">    map.set(n, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="promise-all手写实现"><a href="#promise-all手写实现" class="headerlink" title="promise.all手写实现"></a>promise.all手写实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise_all</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve, reject)&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++)&#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        count++</span><br><span class="line">        res[i] = value</span><br><span class="line">        <span class="keyword">if</span>(count === promises.length)&#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,(reason) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手写bind-call-apply"><a href="#手写bind-call-apply" class="headerlink" title="手写bind, call, apply"></a>手写bind, call, apply</h4><p>bind<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...bindArgs</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : </span><br><span class="line">    context, bindArgs.concat(args))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  Fn.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> Fn()</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.myBind(obj) <span class="comment">// bar === fBound</span></span><br><span class="line">bar(<span class="string">'Jack'</span>) <span class="comment">// this指向context</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Jack</span></span><br><span class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> bar(<span class="string">'Alice'</span>) <span class="comment">// this指向this，也就是alice</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(alice.name) <span class="comment">// Alice</span></span><br></pre></td></tr></table></figure></p><p>call<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call_call = <span class="function"><span class="keyword">function</span>(<span class="params">context, fn</span>) </span>&#123;</span><br><span class="line">  context = context ? <span class="built_in">Object</span>(context) : <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> r = context.fn(args)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>apply<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply_apply = <span class="function"><span class="keyword">function</span>(<span class="params">context, fn</span>) </span>&#123;</span><br><span class="line">  context = context ? <span class="built_in">Object</span>(context) : <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments][<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span>(!args)&#123;</span><br><span class="line">    <span class="keyword">return</span> context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> r = context.fn(args)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="如何实现一个redux"><a href="#如何实现一个redux" class="headerlink" title="如何实现一个redux"></a>如何实现一个redux</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, initialState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = &#123;&#125;</span><br><span class="line">    store.state = initialState</span><br><span class="line">    store.listeners = []</span><br><span class="line">    store.subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">        store.listeners.push(listener)</span><br><span class="line">    &#125;</span><br><span class="line">    store.dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">        store.state = reducer(store.state, action)</span><br><span class="line">        store.listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener())</span><br><span class="line">    &#125;</span><br><span class="line">    store.getState = <span class="function"><span class="params">()</span> =&gt;</span> store.state</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组拍平-1-2-3-4-4-4-5-unique-gt-1-2-3-4-5"><a href="#数组拍平-1-2-3-4-4-4-5-unique-gt-1-2-3-4-5" class="headerlink" title="数组拍平[1,[2,3],[[4],[4,[4,5]]]].unique() -&gt; [1,2,3,4,5]"></a>数组拍平[1,[2,3],[[4],[4,[4,5]]]].unique() -&gt; [1,2,3,4,5]</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toString版</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">this</span>.toString().split(<span class="string">','</span>).map((<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">parseInt</span>(value)))</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归版</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = flatten(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  res = arr.reduce(<span class="function">(<span class="params">acc,cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> acc.concat(cur <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? flatten(cur) : cur)</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js实现并发多个请求，返回先得到response的。就类似Promise-race的实现"><a href="#js实现并发多个请求，返回先得到response的。就类似Promise-race的实现" class="headerlink" title="js实现并发多个请求，返回先得到response的。就类似Promise.race的实现"></a>js实现并发多个请求，返回先得到response的。就类似Promise.race的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise_race</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve, reject)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++)&#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(value)</span><br><span class="line">      &#125;, (reason) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise最大并发数请求batchGet-arr-batchnum-3-timeout-3"><a href="#Promise最大并发数请求batchGet-arr-batchnum-3-timeout-3" class="headerlink" title="Promise最大并发数请求batchGet(arr, batchnum=3, timeout=3)"></a>Promise最大并发数请求batchGet(arr, batchnum=3, timeout=3)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [<span class="string">"www.zhuyuchen.cn"</span>,<span class="string">"www.baidu.com"</span>,<span class="string">"www.qq.com"</span>,<span class="string">"www.baidu.com"</span>,<span class="string">"www.baidu.com"</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是回调函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendResquest</span>(<span class="params">urls,max,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> copyUrls = [...urls]</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            count--</span><br><span class="line">            <span class="keyword">if</span>(copyUrls.length&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                request()</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                callback()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++</span><br><span class="line">        fetch(copyUrls.shift()).then(handle).catch(handle)</span><br><span class="line">        <span class="keyword">if</span>(count&lt;max)&#123;</span><br><span class="line">            request()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request()</span><br><span class="line">&#125;</span><br><span class="line">sendResquest(urls,<span class="number">3</span>,callback)</span><br></pre></td></tr></table></figure><h4 id="URL的正则"><a href="#URL的正则" class="headerlink" title="URL的正则"></a>URL的正则</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUrl</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^https?:\/\/((a-zA-Z0-9)+-?)+[a-zA-Z0-9]+\.)</span></span><br><span class="line"><span class="regexp">  +[a-zA-Z]+)(:\d+)?(\/.*)?(\?.*)?(#.*)?$/</span>.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写一个单例模式"><a href="#写一个单例模式" class="headerlink" title="写一个单例模式"></a>写一个单例模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> CreateSingleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance)&#123;</span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">new</span> SingleTon(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Winner = <span class="keyword">new</span> CreateSingleton(<span class="string">'Winner'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JS的老生常谈手写面试题&lt;/p&gt;
&lt;h4 id=&quot;实现一个函数，每次调用返回下一个质数，要求不使用全局变量，且函数本身不接受任何参数&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="面试" scheme="zeuszhou.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="zeuszhou.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hox原理解析加源码分析</title>
    <link href="zeuszhou.xyz/%E6%BA%90%E7%A0%81/hox%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E5%8A%A0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>zeuszhou.xyz/源码/hox原理解析加源码分析/</id>
    <published>2020-06-23T07:17:41.000Z</published>
    <updated>2020-06-23T07:28:13.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>项目中用到了hox做状态管理，深入学习一下</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>众所周知，自定义hook无法进行数据共享，hox的出现正是为了解决这个问题。<br>hox只有一个api：createModel，包住自定义hook，可以实现全局model，数据共享。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>假设有一个自定义hook userInfo。createModel会创建一个Executor组件的实例，在其中执行userInfo，并把userInfo的结果缓存起来，最后返回一个新的hook：userInfoModel</p><p>userInfoModel订阅了Executor组件的数据，所以在多个组件中调用userInfoModel，拿到的数据都是同一份，也就是Executor中的state</p><p>流程：A组件触发事件，Executor组件的state发生改变，对Executor组件进行重渲染，然后通知A，B，C等组件拿到最新的数据进行渲染</p><p>本质就是一个单例模式，创建一个全局的Executor实例进行全局数据管理</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;项目中用到了hox做状态管理，深入学习一下&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="源码" scheme="zeuszhou.xyz/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="源码" scheme="zeuszhou.xyz/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Redux初探</title>
    <link href="zeuszhou.xyz/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/Redux%E5%88%9D%E6%8E%A2/"/>
    <id>zeuszhou.xyz/状态管理/Redux初探/</id>
    <published>2020-06-13T01:48:48.000Z</published>
    <updated>2020-06-13T04:39:15.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景概念学习"><a href="#背景概念学习" class="headerlink" title="背景概念学习"></a>背景概念学习</h3><p>Redux是flux架构的实现，受Elm启发，核心思想单向数据流<br>Redux is a predictable state container for JavaScript apps，可预测是因为reducer是一个纯函数<br>Flux概念：核心思想单项数据流，action -&gt; dispatcher -&gt; callback -&gt; store -&gt; react view -&gt; action<br>Elm概念：使用Model构建应用，也就是说Model是应用的核心。构建一个应用就是构建Model，构建更新Model的方式，以及如何构建Model到view的映射。</p><h3 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h3><ol><li>store<br>UI唯一的数据来源，react的state，store信息的变化会引起视图更新</li><li>action<br>用来表述发生了什么，必须拥有type属性，可选择携带数据</li><li>reducer<br>纯函数，根据action.type来作出反应，生成新的state来改变store</li></ol><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>UI发生变化，比如点击按钮 -&gt; action，描述点击了按钮 -&gt; reducer处理事件，得到新的state -&gt; store被更新 -&gt; UI响应store更新<br>state通过闭包的形式存放在store中，是只读的，如果要更改state，必须通过发送action进行，action是一个普通对象，react订阅store变化，并re-render视图</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>store.dispatch(action) 来触发reducer<br>store.getState() 获取当前state<br>store.subscribe(listener) store更新后回调listener，回调函数里面可以调用store.getStore()来获得更新后的state<br>store.subscribe(listener) 再调用一次，取消listener</p><h3 id="简化版redux实现"><a href="#简化版redux实现" class="headerlink" title="简化版redux实现"></a>简化版redux实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, initialState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = &#123;&#125;</span><br><span class="line">    store.state = initialState</span><br><span class="line">    store.listeners = []</span><br><span class="line">    store.subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">        store.listeners.push(listener)</span><br><span class="line">    &#125;</span><br><span class="line">    store.dispatch = <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">        store.state = reducer(store.state, action)</span><br><span class="line">        store.listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener())</span><br><span class="line">    &#125;</span><br><span class="line">    store.getState = <span class="function"><span class="params">()</span> =&gt;</span> store.state</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>为什么出现？<br>因为redux只能针对同步且没有副作用的操作，如果存在副作用，比如ajax请求，就需要middleware的帮助</p><p>有无middleware的流程对比：<br>UI -&gt; action(plain) -&gt; reducer -&gt; state -&gt; UI<br>UI -&gt; action(side effect) -&gt; middleware -&gt; action(plain) -&gt; reducer -&gt; state -&gt; UI</p><p>middleware的作用：转换异步操作，生成原始的action，这样reducer函数可以处理相应的action，从而改变state，更新UI</p><h4 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h4><p>redux作者给出的中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> action(dispatch, getState, extraArgument)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next(action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = <span class="keyword">new</span> createThunkMiddleware()</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk</span><br></pre></td></tr></table></figure></p><p>缺点：如果这个副作用action内部很复杂，需要给每个异步操作定义action，不易维护<br>流程：action(side effect) -&gt; redux-thunk监听 -&gt; 执行副作用函数 -&gt; action2(plain)</p><h4 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h4><p>redux-saga是控制执行的generator，在redux-saga中action是原始的js对象，把所有的异步副作用操作放在了saga函数里面<br>这样既统一了action的形式，又使得异步操作集中可以被集中处理</p><p>优点：action统一，可以集中处理异步操作，使用声明式的Effect，提供了更加细腻的控制流<br>流程：action1(plain) -&gt; redux-saga监听 -&gt; 执行相应的Effect方法 -&gt; 返回描述对象 -&gt; 恢复执行副作用函数 -&gt; action2(plain)<br>对比thunk，saga监听到action，不会立刻执行副作用，而是effect方法将其转换为一个描述对象，再将描述对象作为标识，再恢复执行副作用。<br>通过effect函数，可以方便测试，不需要effect函数的返回结果，只需要比较其返回的描述对象，与我们的期望描述对象是否相同</p><p>基础api：</p><ol><li>take，监听action，返回的是监听到的action对象</li><li>call，类似call，但是func可以是generator</li><li>put，类似于redux原始的dispatch</li><li>select，类似于redux的getState</li></ol><h3 id="Dva"><a href="#Dva" class="headerlink" title="Dva"></a>Dva</h3><p>是什么：<br>轻量封装，基于redux和redux-saga，内置react-react和fetch，内置loading，支持HMR</p><p>解决了什么问题：<br>redux书写麻烦，概念太多，文件分离，编辑成本高，不便于组织业务模型</p><h4 id="配合UMI"><a href="#配合UMI" class="headerlink" title="配合UMI"></a>配合UMI</h4><p>api：</p><ol><li>connect 绑定数据到组件</li><li>getDvaApp 获取dva实例</li><li>useDispatch 获取dispatch</li><li>useSelector 获取部分数据</li><li>useStore 获取store</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景概念学习&quot;&gt;&lt;a href=&quot;#背景概念学习&quot; class=&quot;headerlink&quot; title=&quot;背景概念学习&quot;&gt;&lt;/a&gt;背景概念学习&lt;/h3&gt;&lt;p&gt;Redux是flux架构的实现，受Elm启发，核心思想单向数据流&lt;br&gt;Redux is a predict
      
    
    </summary>
    
      <category term="状态管理" scheme="zeuszhou.xyz/categories/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="状态管理" scheme="zeuszhou.xyz/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>前端精读周刊</title>
    <link href="zeuszhou.xyz/%E5%89%8D%E7%AB%AF%E5%B9%BF%E5%BA%A6/%E5%89%8D%E7%AB%AF%E7%B2%BE%E8%AF%BB%E5%91%A8%E5%88%8A/"/>
    <id>zeuszhou.xyz/前端广度/前端精读周刊/</id>
    <published>2020-06-12T14:46:37.000Z</published>
    <updated>2020-06-14T02:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纯函数和副作用"><a href="#纯函数和副作用" class="headerlink" title="纯函数和副作用"></a>纯函数和副作用</h3><p>副作用是指改变了其作用域外的状态<br>纯函数指的是函数的返回值仅仅由参数决定,当给同样的参数时,返回值是固定的，无其他API（包括Math, Date等）调用，无异步操作</p><h3 id="有状态和无状态"><a href="#有状态和无状态" class="headerlink" title="有状态和无状态"></a>有状态和无状态</h3><p>有状态指的是函数有自己的运行状态，可以修改自己的状态<br>无状态指的是函数不管理自己的数据或状态，结果取决于参数</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>[] 0 “” true<br>{} NaN “[object Object]” true<br>null 0 “null” false<br>undefined NaN “undefined” false</p><h3 id="状态管理库的对比"><a href="#状态管理库的对比" class="headerlink" title="状态管理库的对比"></a>状态管理库的对比</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;纯函数和副作用&quot;&gt;&lt;a href=&quot;#纯函数和副作用&quot; class=&quot;headerlink&quot; title=&quot;纯函数和副作用&quot;&gt;&lt;/a&gt;纯函数和副作用&lt;/h3&gt;&lt;p&gt;副作用是指改变了其作用域外的状态&lt;br&gt;纯函数指的是函数的返回值仅仅由参数决定,当给同样的参数时,返
      
    
    </summary>
    
      <category term="前端广度" scheme="zeuszhou.xyz/categories/%E5%89%8D%E7%AB%AF%E5%B9%BF%E5%BA%A6/"/>
    
    
      <category term="前端广度" scheme="zeuszhou.xyz/tags/%E5%89%8D%E7%AB%AF%E5%B9%BF%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>开发踩坑记录</title>
    <link href="zeuszhou.xyz/%E8%B8%A9%E5%9D%91/%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>zeuszhou.xyz/踩坑/开发踩坑记录/</id>
    <published>2020-06-12T07:13:17.000Z</published>
    <updated>2020-06-23T02:30:14.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录自己平时开发过程中的坑</p><h3 id="2020年6月的坑"><a href="#2020年6月的坑" class="headerlink" title="2020年6月的坑"></a>2020年6月的坑</h3><ol><li><p>chrome图片显示正常，safari和iphone看不到图片<br>原因：后台传的图片是webp，webp是谷歌开发的一种旨在加快图片加载速度的图片格式<br>图片压缩体积大约只有JPEG的2/3，说白了就是省空间。但safari不支持，转成png就ok了</p></li><li><p>微信网页登陆问题<br>扫码得到code，请求登陆接口报错，发现cookie没有带上，后面发现是因为前端后端的域名不是一样的，存在cookie跨域，后手动种cookie到测试环境，后又遇到参数错误问题，和中台同学沟通加上接口才得以解决。<br>启发：报错了就问，很多时候问题不是出在你身上，脸皮厚一点。cookie的domain，跨域机制需要理解</p></li><li><p>useEffect取消监听<br>feed下拉切换页面后仍然生效，发现监听位置写在了index，所以切换页面也不会销毁，写在组件里就可以了，注意useEffect取消监听，依赖不写</p></li><li><p>setState生效问题<br>set完state不会立刻生效，还是得用当前的值</p></li><li><p>前端传数组问题<br>数组需要用JSON.stringify，将数组对象转化成json字符串，否则会出现分开元素传递的奇怪现象</p></li><li><p>可替换参数问题<br>在hooks里，如果不需要render但参数需要替换，不要写在useState，直接写变量使用就可以</p></li><li><p>hooks用useState却不重新渲染组件问题<br>场景是用户发送评论，实时改变评论数和显示最新评论，评论是个对象，如果在更新函数里传入同一个对象时将无法触发更新。因为useState里数据务必为immutable（不可赋值的对象），解决思路就是通过slice() 返回一个新的对象去赋值。自加setCount(count + 1)</p></li><li><p>图片统一大小被拉伸问题<br>一句object-fit: cover解决问题，被替换的内容大小保持其宽高比，同时填充元素的整个内容框。 如果对象的宽高比与盒子的宽高比不匹配，该对象将被剪裁以适应。默认会是fill，表示拉伸以适应</p></li><li><p>微信内打开H5登陆报错误码10005<br>原因是微信内打开h5登陆微信的appid是微信公众号的，扫码登陆的appid是网页应用的</p></li><li><p>cookie跨域问题<br>cookie跨域的前提是根域得一样<br>cookie的domain表示可以访问此cookie的域名<br>假设2个域名为m.han.com 和han.com<br>在m.han.com设置cookie，不带domain属性，不会发送到han.com<br>在m.han.com设置cookie，带domain属性han.com，会发送到han.com，其他子域不可用<br>在m.han.com设置cookie，带domain属性.han.com，会发送到han.com，其他子域也可用<br>无论是客户端还是服务端，han.com都不能设置cookie到h.com</p></li></ol><p><em>客户端只会带上与请求同域的cookie</em></p><p>ajax同域请求默认会带cookie，但跨域默认不会带上cookie，客户端设置withCredentials为true才能跨域携带<br>fetch同域跨域都不会带，客户端设置credentials为include，跨域可以带，same-origin，同域可以带，omit任何请求都不带<br>Access-Control-Allow-Origin表示接受哪些域名的请求，发送cookie时，不能为*，必须指定域名<br>Access-Control-Allow-Credentials表示是否允许客户端发送cookie</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录自己平时开发过程中的坑&lt;/p&gt;
&lt;h3 id=&quot;2020年6月的坑&quot;&gt;&lt;a href=&quot;#2020年6月的坑&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="踩坑" scheme="zeuszhou.xyz/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
      <category term="踩坑" scheme="zeuszhou.xyz/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>CSS3特性</title>
    <link href="zeuszhou.xyz/CSS/CSS3%E7%89%B9%E6%80%A7/"/>
    <id>zeuszhou.xyz/CSS/CSS3特性/</id>
    <published>2020-06-09T13:35:08.000Z</published>
    <updated>2020-06-10T01:57:23.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>比起前端的其他知识点，CSS容易被忽略，然而实际做项目中，CSS可真是太重要了，系统学一学对于开发效率来说有很大提升</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ol><li>E:nth-child(n)系列</li><li>E:enabled, E:disabled, E:checked</li><li>E:first-of-type系列,选择属于其父元素的首个E元素的每个E元素</li><li>[attribute^=value]系列，选择某元素attribute属性是以value开头的</li><li>E::selection: 选择被用户选取的元素部分</li></ol><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><p>元素改变样式的过渡效果<br>transition-property: 规定应用过渡的CSS属性的名称。<br>transition-duration: 规定完成过渡效果需要多长时间。<br>transition-delay: 规定过渡效果何时开始，默认是0。<br>transition-timing-function: 规定过渡效果的时间曲线，默认是”ease”，还有linear、ease-in、ease-out、ease-in-out和cubic-bezier等过渡类型。<br>transition: 简写属性，用于在一个属性中设置四个过渡属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个1s是持续时间，第二个是从何时开始</p><h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><p>Transform用来向元素应用各种2D和3D转换，该属性允许我们对元素进行旋转、缩放、移动或倾斜等操作。</p><p>none: 定义不进行转换。<br>matrix(n,n,n,n,n,n): 定义2D转换，使用六个值的矩阵。<br>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n): 定义3D转换，使用16个值的4x4矩阵。<br>translate(x,y): 定义2D位移转换。<br>translate3d(x,y,z): 定义3D位移转换。<br>translateX(x): 定义位移转换，只是用X轴的值。<br>translateY(y): 定义位移转换，只是用Y轴的值。<br>translateZ(z): 定义3D位移转换，只是用Z轴的值。<br>scale(x,y): 定义2D缩放转换。<br>scale3d(x,y,z): 定义3D缩放转换。<br>scaleX(x): 通过设置X轴的值来定义缩放转换。<br>scaleY(y): 通过设置Y轴的值来定义缩放转换。<br>scaleZ(z): 通过设置Z轴的值来定义3D缩放转换。<br>rotate(angle): 定义2D旋转，在参数中规定角度。<br>rotate3d(x,y,z,angle): 定义3D旋转。<br>rotateX(angle): 定义沿着X轴的3D旋转。<br>rotateY(angle): 定义沿着Y轴的3D旋转。<br>rotateZ(angle): 定义沿着Z轴的3D旋转。<br>skew(x-angle,y-angle): 定义沿着X和Y轴的2D倾斜转换。<br>skewX(angle): 定义沿着X轴的2D倾斜转换。<br>skewY(angle): 定义沿着Y轴的2D倾斜转换。<br>perspective(n): 为3D转换元素定义透视视图。</p><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p>CSS3的Animation制作动画我们可以省去复杂的js代码.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 旋转 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> spin &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 弹幕 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> bar &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">        transform: translate3d(0,0,0);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%,0,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">animation</span>: bar <span class="number">1s</span> linear <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h3><p>border-radius 圆角<br>box-shadow 添加阴影<br>border-image 绘制边框</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>background-clip属性用于确定背景画区，通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围<br>background-origin，用于确定背景的位置，通常与background-position联合使用<br>background-size，常用来调整背景图片的大小<br>background-break，控制背景怎样在这些不同的盒子中显示</p><h3 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h3><p>word-wrap 属性允许您允许文本强制文本进行换行<br>text-overflow 设置或检索当当前行超过指定容器的边界时如何显示，ellipsis逗号<br>text-shadow 可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p><p>text-decoration CSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置<br>text-fill-color: 设置文字内部填充颜色<br>text-stroke-color: 设置文字边界填充颜色<br>text-stroke-width: 设置文字边界宽度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;比起前端的其他知识点，CSS容易被忽略，然而实际做项目中，CSS可真是太重要了，系统学一学对于开发效率来说有很大提升&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="CSS" scheme="zeuszhou.xyz/categories/CSS/"/>
    
    
      <category term="CSS" scheme="zeuszhou.xyz/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS和ES6 Module的区别</title>
    <link href="zeuszhou.xyz/%E6%A8%A1%E5%9D%97%E5%8C%96/CommonJS%E5%92%8CES6Module%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>zeuszhou.xyz/模块化/CommonJS和ES6Module的区别/</id>
    <published>2020-06-09T07:08:31.000Z</published>
    <updated>2020-06-09T08:11:22.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><ol><li>一个文件就是一个模块，第一次加载时，会在内存生成一个对象，以后再用到这个模块，直接从缓存取这个对象，除非清除缓存</li><li>require是同步的，适用于node端，浏览器端读取文件速度很慢，容易卡死</li><li>输出的是一个值的拷贝，一旦输出，输出的值发生变化，原来的值也不会变</li><li>运行时加载，加载时执行，当脚本被require，就会全部执行，一旦出现某个模块被循环加载，就只输出已经执行的部分，未执行的部分不会输出</li><li>this指向当前模块</li><li>不能require ES6模块</li></ol><h3 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h3><ol><li>ES6输出的是值的引用，输出的值发生变化，原来的值也会改变</li><li>ES6是编译时输出接口</li><li>this指向undefined</li><li>遇到循环引用，使用import加载一个变量，变量不会被缓存，真正取值时能拿到最终的值</li><li>支持加载commonjs</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一个文件就是一个模块，第一次加载时，会在内存生成一个对象，以后再用到这个模块，直
      
    
    </summary>
    
      <category term="模块化" scheme="zeuszhou.xyz/categories/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="模块化" scheme="zeuszhou.xyz/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="zeuszhou.xyz/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>zeuszhou.xyz/函数式编程/函数式编程/</id>
    <published>2020-06-08T13:28:56.000Z</published>
    <updated>2020-06-24T07:08:43.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>函数是一等公民<br>函数当成赋值给变量，当成参数传给函数或者当成返回值返回</p></li><li><p>只用表达式，不用语句，每一步都是纯运算，而且有返回值<br>表达式是单纯的运算过程，总有返回值<br>语句是执行某种操作，没有返回值</p></li><li><p>没有副作用<br>副作用指的是函数内部与外部互动，比如修改全局变量的值，产生运算以外的其他结果</p></li><li><p>引用透明<br>函数的运行不依赖于外部变量或状态，只要输入的参数相同，所得的返回值总是相同</p></li></ol><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>代码管理方便，每个函数可以当成独立单元</li><li>易于并发编程，不存在锁的问题</li><li>代码的热升级</li></ol><h3 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h3><p>1. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数是一等公民&lt;br&gt;函数当成赋值给变量，当成参数传给函数或者当成返回值返回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只用表达式
      
    
    </summary>
    
      <category term="函数式编程" scheme="zeuszhou.xyz/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="zeuszhou.xyz/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>React hooks 再理解</title>
    <link href="zeuszhou.xyz/React/React-hooks-%E5%86%8D%E7%90%86%E8%A7%A3/"/>
    <id>zeuszhou.xyz/React/React-hooks-再理解/</id>
    <published>2020-06-08T13:18:16.000Z</published>
    <updated>2020-06-12T06:11:47.934Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一句话概括hooks：不编写class的情况下，使用state和其他react特性</p><h3 id="为什么要用hooks"><a href="#为什么要用hooks" class="headerlink" title="为什么要用hooks"></a>为什么要用hooks</h3><ol><li>class版本，组件之间复用状态逻辑很难，hooks可以在不改变组件结构的情况下复用状态逻辑</li><li>class版本，复杂组件变得难以理解，hooks将组件中相互关联的部分拆分的更小，并且舍去生命周期</li><li>class版本，class难以理解，需要考虑this，绑定事件</li><li>class版本，class无法很好的压缩，并且会使得热重载出现不稳定的情况</li><li>hooks组件不会被实例化，渲染性能得到提高</li></ol><h3 id="模拟生命周期（memo，useRef）"><a href="#模拟生命周期（memo，useRef）" class="headerlink" title="模拟生命周期（memo，useRef）"></a>模拟生命周期（memo，useRef）</h3><ol><li><p>shouldComponentUpdate<br>React.memo 包裹一个组件来对它的 props 进行浅比较<br>但这不是一个 hooks，因为它的写法和 hooks 不同<br>其实React.memo 等效于 PureComponent，但它只比较 props。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = React.memo(</span><br><span class="line">    _MyComponent,</span><br><span class="line">    (prevProps, nextProps) =&gt; nextProps.count !== prevProps.count</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>componentDidUpdate<br>useRef 在组件中创建“实例变量”<br>它作为一个标志来指示组件是否处于挂载或更新阶段<br>当组件更新完成后在会执行 else 里面的内容，以此来单独模拟 componentDidUpdate。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mounted = useRef()</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!mounted.current) &#123;</span><br><span class="line">        mounted.current = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这里写代码"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>componentWillUnmount<br>当在 useEffect 的回调函数中返回一个函数时<br>这个函数会在组件卸载前被调用<br>我们可以在这里面清除定时器或事件监听器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"will mount"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></li></ol><h3 id="useState太多怎么办（useReducer）"><a href="#useState太多怎么办（useReducer）" class="headerlink" title="useState太多怎么办（useReducer）"></a>useState太多怎么办（useReducer）</h3><p>问：useState太多怎么办<br>答：对象属性赋值 or useReducer</p><p>相比于useState, useReducer</p><ol><li>更容易管理大量状态</li><li>更容易被其他开发者理解</li><li>更容易做测试, 所有的跟 state 相关的业务逻辑代码都可以放到一个单独的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br><span class="line"><span class="comment">// diapatch 一个 action，使用 reducer 来更新 state</span></span><br></pre></td></tr></table></figure><h3 id="hooks如何模拟class组件的this（useRef）"><a href="#hooks如何模拟class组件的this（useRef）" class="headerlink" title="hooks如何模拟class组件的this（useRef）"></a>hooks如何模拟class组件的this（useRef）</h3><p>函数组件和class组件一个区别在于：函数组件可以捕获渲染时所用的值，而class组件用this会捕获到最新的值。<br>本质是因为react的props是immutable的，永远不会改变，而class组件的this是会变的，这也就意味着，this永远会拿最新的值。<br>所以问题来了</p><ol><li><p>用class组件如何拿到捕获渲染时所用的值<br>方法一：在调用事件前，读取this.props，然后显示传给回调函数<br>方法二：使用闭包，把this.props赋给props，然后操作props</p></li><li><p>用function组件如何拿到最新的值<br>使用ref，ref可以方便的保存任何值，类似于实例字段的方式，useRef在每次渲染后会返回同一个ref对象<br>变更.current属性不会引发组件重新渲染，所以current属性就像一个可以放东西的盒子，放最新的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pra</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [age, setAge] = useState()</span><br><span class="line">    <span class="keyword">const</span> lastAge = useRef();</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        lastAge.current = age</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> showAge = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(lastAge.current)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>原理是在effect内部执行赋值操作，使得ref的值只有在dom更新之后再改变，确保了我们的变量突变不会破坏依赖于可中断渲染的事件切片和suspense等特性</p><h3 id="useCallback和useMemo的区别"><a href="#useCallback和useMemo的区别" class="headerlink" title="useCallback和useMemo的区别"></a>useCallback和useMemo的区别</h3><p>useCallback是用来优化对子组件的渲染，缓存函数的引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 在a，b不变的情况下，memoizedCallback的引用不变，所以这个入参函数会被缓存，从而起到优化渲染的效果</span></span><br></pre></td></tr></table></figure></p><p>useMemo是用来优化当前组件高开销的计算，缓存计算数据的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computeValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(count), [count]);</span><br><span class="line"><span class="comment">// 只有在count改变的时候，computeExpensiveValue才会重新执行</span></span><br></pre></td></tr></table></figure></p><h3 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h3><p>usePrevProps<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> usePrevProps = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = useRef()</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        ref.current = value</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ref.current</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> handleCount = <span class="function"><span class="params">()</span> =&gt;</span> setCount(count + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> previous = usePrevProps(handlecount)</span><br></pre></td></tr></table></figure></p><h3 id="PureComponent和React-memo"><a href="#PureComponent和React-memo" class="headerlink" title="PureComponent和React.memo"></a>PureComponent和React.memo</h3><ol><li><p>React.memo只适用于函数组件，如果组件在给定props的情况下渲染结果是相同的，可以包裹一个memo，react可以跳过渲染组件的操作直接复用最近一次渲染的结果<br>memo只检查props的变化，只会进行浅层对比，复杂对象可以传入第二个比较函数参数<br>和shouldComponentUpdate相反，如果props相等，会返回true，否则返回false</p></li><li><p>对比Component，React.PureComponent实现了shouldComponentUpdate，以浅对比prop和state的方式实现<br>如果state和props相同，render会渲染同样的内容，shouldComponentUpdate可以提高性能<br>但如果props和state是复杂的对象，会产生错误的结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一句话概括hooks：不编写class的情况下，使用state和其他react特性&lt;/p&gt;
&lt;h3 id=&quot;为什么要用hooks&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="React" scheme="zeuszhou.xyz/categories/React/"/>
    
    
      <category term="React" scheme="zeuszhou.xyz/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Promise代码专辑</title>
    <link href="zeuszhou.xyz/promise/Promise%E4%B8%93%E8%BE%91/"/>
    <id>zeuszhou.xyz/promise/Promise专辑/</id>
    <published>2020-06-07T05:05:49.000Z</published>
    <updated>2020-06-07T06:55:18.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Promise在前端的重要性不言而喻，手写promise代码在面试中出现的也越来越多，基本写不出来就拜拜了，还是得多敲一敲</p><h3 id="Promise实现"><a href="#Promise实现" class="headerlink" title="Promise实现"></a>Promise实现</h3><ol><li>自身属性value，reason，status，resolve的callback数组，reject的callback数组</li><li>resolve方法，status为pending时，赋值value，status，执行resolve全部方法</li><li>reject方法，status为pending时，赋值reason，status，执行reject全部方法</li><li>执行执行器函数</li><li>原型上定义then方法，传入resolve和reject作为参数</li><li>status为resolve，执行resolve，为reject，执行reject，为pending时，resolve加入resolve数组，reject加入reject数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    self.value = <span class="literal">undefined</span></span><br><span class="line">    self.reason = <span class="literal">undefined</span></span><br><span class="line">    self.status = <span class="string">'pending'</span></span><br><span class="line">    self.resolveCallback = []</span><br><span class="line">    self.rejectCallback = []</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(self.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">            self.value = value</span><br><span class="line">            self.status = <span class="string">'resolved'</span></span><br><span class="line">            self.resolveCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">                fn()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(self.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">            self.reason = reason</span><br><span class="line">            self.status = <span class="string">'rejected'</span></span><br><span class="line">            self.rejectCallback.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">                fn()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">myPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span>(self.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">        resolve(self.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(self.status === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">        reject(self.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(self.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">        self.resolveCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(self.value)</span><br><span class="line">        &#125;)</span><br><span class="line">        self.rejectCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(self.reason)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-all实现"><a href="#Promise-all实现" class="headerlink" title="Promise all实现"></a>Promise all实现</h3><ol><li>返回一个promise all，循环，每一个promise都resolve，再then</li><li>如果promise 成功了，count+1，value存到res，当count等于数组长度，代表都resolve完成了，resolve promise all，传入res</li><li>如果有promise reject了，直接reject promise all</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise_all</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve, reject)&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> res = []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++)&#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                count++</span><br><span class="line">                res[i] = value</span><br><span class="line">                <span class="keyword">if</span>(count === len)&#123;</span><br><span class="line">                    <span class="keyword">return</span> resolve(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,(reason) =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-race实现"><a href="#Promise-race实现" class="headerlink" title="Promise race实现"></a>Promise race实现</h3><ol><li>和all唯一区别，当子promise成功的时候，直接resolve，传入value</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise_race</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve, reject)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++)&#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> resolve(value)</span><br><span class="line">            &#125;,(reason) =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-并发限制"><a href="#Promise-并发限制" class="headerlink" title="Promise 并发限制"></a>Promise 并发限制</h3><p>并发限制指的时每个时刻并发执行的promise数量是固定的，10w条并发请求，最终的执行结果也一样<br>promise不是调用promiseall时执行，而是实例化promise对象的时候执行<br>所以要并发限制，只能控制promise的实例化</p><ol><li>从array第一个元素开始，初始化promise，ret存初始化的promise，用一个executing数组保存正在执行的promise</li><li>不断初始化promise，直到limit</li><li>使用promise.race，获得executing中promise的执行情况，当有一个promise执行完毕，继续初始化promise并放入executing中</li><li>所有的promise都执行完毕后调用promise.all返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pool</span>(<span class="params">limit, array, func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> ret = [] <span class="comment">// promise数组</span></span><br><span class="line">    <span class="keyword">let</span> executing = [] <span class="comment">// promise执行数组</span></span><br><span class="line">    <span class="keyword">let</span> enqueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 当array为i时，直接resolve</span></span><br><span class="line">        <span class="keyword">if</span>(array.length === i)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每调用一次enqueue，初始化一个promise</span></span><br><span class="line">        <span class="keyword">let</span> item = array[i++]</span><br><span class="line">        <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> func(item, array))</span><br><span class="line">        <span class="comment">// 放入promise数组</span></span><br><span class="line">        ret.push(p)</span><br><span class="line">        <span class="comment">// promise执行完毕，从executing数组删除</span></span><br><span class="line">        <span class="keyword">let</span> e = p.then(<span class="function"><span class="params">()</span> =&gt;</span> executing.splice(executing.indexOf(e),<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 放入promise执行数组</span></span><br><span class="line">        executing.push(e)</span><br><span class="line">        <span class="comment">// 使用promise.race，当执行数组数量低于limit，实例化新的promise并执行</span></span><br><span class="line">        <span class="keyword">let</span> r = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">        <span class="keyword">if</span> (executing.length &gt;= limit)&#123;</span><br><span class="line">            r = <span class="built_in">Promise</span>.race(executing)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r.then(<span class="function"><span class="params">()</span> =&gt;</span> enqueue())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueue().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.all(ret))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Promise在前端的重要性不言而喻，手写promise代码在面试中出现的也越来越多，基本写不出来就拜拜了，还是得多敲一敲&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="promise" scheme="zeuszhou.xyz/categories/promise/"/>
    
    
      <category term="promise" scheme="zeuszhou.xyz/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Proxy和Reflect初探</title>
    <link href="zeuszhou.xyz/uncategorized/Proxy%E5%92%8CReflect%E5%88%9D%E6%8E%A2/"/>
    <id>zeuszhou.xyz/uncategorized/Proxy和Reflect初探/</id>
    <published>2020-06-02T01:44:51.000Z</published>
    <updated>2020-06-02T02:29:38.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>在访问对象之前建立一道拦截，任何访问该对象的操作都会通过这个拦截，执行proxy里的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure></p><p>new proxy表示proxy实例，target表示要拦截的对象，handler表示拦截的方法</p><p>handler有13种：</p><ol><li>get(target, propKey, receiver) receiver可选</li><li>set(target, propKey, value, receiver) receiver可选</li><li>has</li><li>apply</li><li>ownKeys</li><li>construct</li><li>isExtensible</li><li>deleteProperty</li><li>defineProperty</li><li>getPropertyOf</li><li>setPropertyOf</li><li>preventExtensions</li><li>getOwnPropertyDescriptor</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"siyao"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function">(<span class="params">obj, name, </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="string">"我喜欢"</span> + obj.name</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function">(<span class="params">obj, name, value, </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"还名字了"</span>)</span><br><span class="line">        obj[name] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, handler)</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(proxy) <span class="comment">// 同上</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name)</span><br><span class="line">obj.name = <span class="string">"xiangchan"</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name)</span><br></pre></td></tr></table></figure><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p>ES6为操作对象而提供的API，用来调用对象的默认行为</p><ol><li>拥有proxy所有13种代理方法，静态形式存在，基本和Object同名方法相同，返回bool，语义性更好</li><li>无论proxy怎么修改默认行为，总是可以用Reflect对应的方法获取默认行为</li><li>修改某些Object方法的返回结果，使其更合理，比如Object.defineProperty无法定义属性会报错，Reflect.defineProperty会返回false</li><li>把Object操作变成函数行为，比如name in obj， delete obj[name]变成Reflect.deleteProperty和Reflect.has</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h3&gt;&lt;p&gt;在访问对象之前建立一道拦截，任何访问该对象的操作都会通过这个拦截，执行proxy里的方法&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS的知识点</title>
    <link href="zeuszhou.xyz/CSS/CSS%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>zeuszhou.xyz/CSS/CSS的知识点/</id>
    <published>2020-06-01T14:33:39.000Z</published>
    <updated>2020-06-09T13:35:23.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><p>都是为了格式化文档树以外的信息，修饰不在文档树中的部分</p><p>伪类，单冒号，a:hover 表示鼠标覆盖样式； li:nth-child 表示n个li;</p><p>伪元素，双冒号，::before 让插入的内容出现在之前; ::after 让插入的内容出现在之后，可以用来清除浮动（clear both加上BFC）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;伪类和伪元素&quot;&gt;&lt;a href=&quot;#伪类和伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类和伪元素&quot;&gt;&lt;/a&gt;伪类和伪元素&lt;/h3&gt;&lt;p&gt;都是为了格式化文档树以外的信息，修饰不在文档树中的部分&lt;/p&gt;
&lt;p&gt;伪类，单冒号，a:hover 表示鼠标
      
    
    </summary>
    
      <category term="CSS" scheme="zeuszhou.xyz/categories/CSS/"/>
    
    
      <category term="CSS" scheme="zeuszhou.xyz/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS对象方法总结</title>
    <link href="zeuszhou.xyz/JS%E5%9F%BA%E7%A1%80/Object%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>zeuszhou.xyz/JS基础/Object方法总结/</id>
    <published>2020-05-31T08:30:54.000Z</published>
    <updated>2020-05-31T14:30:48.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a>Object方法</h3><ol><li><p>Object.assign<br>对象合并，浅拷贝，只拷贝自身属性，prototype不拷贝，视数组为对象进行处理，[1,2,3] + [4,5] = [4,5,3]</p></li><li><p>Object.create<br>使用指定的原型对象及其属性去创建一个新的对象</p></li><li><p>Object.defineProperties<br>直接在一个对象上修改一个或多个属性或者加属性（指的是内部属性）</p></li><li><p>Object.defineProperty<br>同上，单复数的区别</p></li></ol><p>数据描述符｜数据属性</p><ul><li>Configurable：表示能否通过delete删除此属性，能否修改内部属性值</li><li>Enumerable：表示该属性是否可枚举，是否可以通过for in或Object.keys()返回属性</li><li>Writable：表示能否修改属性的值</li><li>Value：表示该属性对应的值</li></ul><p>存取描述符｜访问器属性</p><ul><li>Configurable</li><li>Enumerable</li><li>get：访问对象属性时调用的函数</li><li>set：改变对象属性时调用的函数<br>使用defineProperty或者defineProperties时，属性默认为false或者undefined<br>用var定义的任何变量，该属性都是false<br>字面量定义的对象，该对象内部的属性的数据描述符属性都为true<br>当writable为true，configurable为false时，修改writable和value，不会报错<br>当writable为false，configurable为true时，value可以通过defineProperty修改，但不能直接赋值修改</li></ul><ol start="5"><li>Object.getOwnPropertyDescriptor</li><li><p>Object.getOwnPropertyDescriptors<br>返回指定对象上一个自有属性对应的属性描述符</p></li><li><p>Object.entries<br>返回键值对数组</p></li><li><p>obj.hasOwnProperty<br>对象自身属性是否有指定的属性</p></li><li><p>Object.keys<br>for in会枚举原型链上的属性，这个不会<br>不可枚举属性也不会打印</p></li><li><p>Object.values<br>会过滤属性名为 Symbol 值的属性</p></li><li><p>Object.getOwnPropertyNames<br>返回所有的属性，包括不可以枚举属性，但不包括属性名为 Symbol 值的属性</p></li><li><p>Object.getOwnPropertySymbols<br>返回所有Symbol属性的数组</p></li><li><p>Object.getPropertyOf<br>返回对象的原型</p></li><li><p>obj.isPrototypeOf<br>判断一个对象是否在另一个对象的原型链上</p></li><li><p>Object.setPrototypeOf<br>设置对象的原型对象</p></li><li><p>Object.is<br>判断两个值是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is([], []); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">-0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>Object.freeze<br>冻结一个对象，对象永远不可变</p></li><li><p>Object.isFrozen<br>判断是否冻结</p></li><li><p>Object.preventExtensions<br>对象不能添加新属性，可修改删除，不能添加</p></li><li><p>Object.isExtensible<br>判断对象是否可扩展，seal，freeze，preventExtensions都会使其不可扩展</p></li><li><p>Object.seal<br>密封对象，不能添加属性，不能配置，不可删除，但可以修改属性的值</p></li><li><p>Object.isSealed<br>判断对象是否被密封</p></li></ol><p>扩展（不能加属性） -&gt; 密封（不能配置，但可改值） -&gt; 冻结（不能修改值，所以啥都不能）</p><h3 id="Array方法"><a href="#Array方法" class="headerlink" title="Array方法"></a>Array方法</h3><ol><li>isArray 判断是否数组</li><li>toString 数组转字符串</li><li>valueof 返回对象原始值</li><li>join 数组转字符串</li><li>push </li><li>pop</li><li>unshift 添加头</li><li>shift 删除头</li><li>reverse</li><li>sort</li><li>concat</li><li>slice</li><li>splice</li><li>indexOf</li><li>every</li><li>filter</li><li>forEach</li><li>map</li><li>some</li><li>reduce</li><li>reduceRight</li><li>copyWithin 从数组的指定位置拷贝元素到数组的另一个指定位置中</li><li>entries</li><li>fill</li><li>find 返回符合传入测试（函数）条件的数组元素</li><li>findIndex 返回符合传入测试（函数）条件的数组元素索引</li><li>from 通过给定的对象中创建一个数组，比如set</li><li>includes 判断一个数组是否包含一个指定的值</li><li>keys</li><li>lastIndexOf</li></ol><h3 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h3><ol><li>charAt</li><li>charCodeAt</li><li>concat</li><li>slice</li><li>substr</li><li>substring</li><li>indexOf</li><li>lastIndexOf</li><li>toLowerCase</li><li>toUpperCase</li><li>match</li><li>search</li><li>replace</li><li>split</li><li>trim 去除字符串两边的空白</li><li>localeCompare 比较两个字符串的字符顺序</li><li>formCharCode</li><li>valueOf</li><li>includes</li><li>startsWith</li><li>endsWith</li><li>repeat</li><li>padStart 在头部补全字符串</li><li>padEnd 在尾部补全字符串</li></ol><h3 id="Math方法"><a href="#Math方法" class="headerlink" title="Math方法"></a>Math方法</h3><ol><li>Math.abs</li><li>Math.ceil</li><li>Math.floor</li><li>Math.max</li><li>Math.min</li><li>Math.pow(x,y) x的y次方</li><li>Math.random</li><li>Math.round</li><li>Math.sqrt</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Object方法&quot;&gt;&lt;a href=&quot;#Object方法&quot; class=&quot;headerlink&quot; title=&quot;Object方法&quot;&gt;&lt;/a&gt;Object方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Object.assign&lt;br&gt;对象合并，浅拷贝，只拷贝自身属性，pro
      
    
    </summary>
    
      <category term="JS基础" scheme="zeuszhou.xyz/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS基础" scheme="zeuszhou.xyz/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>React总结第一弹</title>
    <link href="zeuszhou.xyz/React/React%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>zeuszhou.xyz/React/React总结第一弹/</id>
    <published>2020-05-28T14:30:10.000Z</published>
    <updated>2020-05-31T08:29:37.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类组件中this指向问题"><a href="#类组件中this指向问题" class="headerlink" title="类组件中this指向问题"></a>类组件中this指向问题</h3><p>分为5种，所以还是函数组件好搞</p><ol><li>React.createClass，16版本已经废除，函数的this会自动绑定到组件，没了</li><li>Render函数中bind，组件每次执行render会重新分配函数，影响性能，会破坏purecomponent性能，不推荐</li><li>使用箭头函数，父组件刷新，都会生成一个新的箭头函数，子组件每次都会更新，和2一样，不推荐</li><li>构造函数中绑定this，父组件刷新，如果props值不变，子组件就不会刷新，推荐，就是可读性不太行</li><li>定义阶段使用箭头函数绑定，箭头函数会自动绑定到当前组件的作用域</li></ol><h3 id="关于antd表格渲染按钮"><a href="#关于antd表格渲染按钮" class="headerlink" title="关于antd表格渲染按钮"></a>关于antd表格渲染按钮</h3><p>在table的column中，直接写onclick函数回调会在渲染时直接调用，点击反而不能触发，需要改成箭头函数</p><h3 id="关于set-state"><a href="#关于set-state" class="headerlink" title="关于set state"></a>关于set state</h3><p>写翻页的时候，发现set完page，page并没有立刻改变，直接拿state发请求，page还是上次的page。原来set state只是把任务交给任务队列，本身并没有执行任务，所以在那个回调函数中，set了，page也不会立刻改变，state会被batchupdate，通过dom diff之后加入到组件实例。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>react遍历数组一定要带上key，直接用map的index就行，不带会警告，帮助react优化渲染，使react只是重新排列而不是重新渲染它们，可以提供性能</p><h3 id="jsx的div问题"><a href="#jsx的div问题" class="headerlink" title="jsx的div问题"></a>jsx的div问题</h3><p>render函数或者三目运算，多个html元素一定要包一个div根元素，要不就报错了。<br>render函数返回一个react元素，是原生DOM组件的表示</p><h3 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h3><p>Refs提供一种访问在render方法中创建的DOM节点或者React元素的方法。<br>在典型数据流外，强制修改子代，这个时候可以使用Refs。<br>在input添加一个ref属性，该属性的值是一个回调函数，参数是DOM元素或者组件的挂载实例。<br>该函数接受输入的实际DOM元素，然后放在实例上，这样就可以在handleSubmit内部访问它。<br>在函数组件中，通过闭包使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomForm</span> (<span class="params">&#123;handleSubmit&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inputElement</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form onSubmit=&#123;() =&gt; handleSubmit(inputElement.value)&#125;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'text'</span></span><br><span class="line">        ref=&#123;(input) =&gt; inputElement = input&#125; /&gt;</span><br><span class="line">      &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用场景：</p><ol><li>需要管理焦点，选择文本或媒体播放时</li><li>触发式动画</li><li>与第三方DOM库集成</li></ol><h3 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h3><p>都是用来处理表单数据，推荐受控组件</p><ol><li>受控组件</li></ol><ul><li>包含表单的组件将跟踪其状态中的输入值，并在每次回调触发时重新渲染，以这种方式由React控制其值的输入表单元素称为受控组件</li><li>数据由React组件管理</li><li>表单元素默认映射到状态，双向绑定，用value绑定到state</li><li>必须使用onchange来绑定事件</li><li>支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式</li></ul><ol start="2"><li>非受控组件</li></ol><ul><li>非受控组件通常更易于实现，因为只需使用refs即可从 DOM 中获取值</li><li>数据由DOM节点来处理</li><li>容易和第三方库结合，更容易同时集成 React 和非 React 代码，可以减少代码量</li><li>适用场景只有一次性取值和submit验证，其他都推荐受控组件</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>componentWillMount：render之前执行<br>componentDidMount：render之后执行<br>componentWillReceiveProps：接到props之前执行<br>shouldComponentUpdate：返回true更新，如果不需要render，返回false，提高性能的方法<br>componentWillUpdate：shouldComponentUpdate返回true，更新之前执行<br>componentDidUpdate：更新dom以响应props和state的变化<br>componentWillUnmount：用于取消任何的网络请求，或删除与组件关联的所有事件监听器</p><h3 id="React-Context"><a href="#React-Context" class="headerlink" title="React Context"></a>React Context</h3><p>Context通过组件树提供一个传递数据的方法，从而避免在每一层手动的传递props属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类组件中this指向问题&quot;&gt;&lt;a href=&quot;#类组件中this指向问题&quot; class=&quot;headerlink&quot; title=&quot;类组件中this指向问题&quot;&gt;&lt;/a&gt;类组件中this指向问题&lt;/h3&gt;&lt;p&gt;分为5种，所以还是函数组件好搞&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;R
      
    
    </summary>
    
      <category term="React" scheme="zeuszhou.xyz/categories/React/"/>
    
    
      <category term="React" scheme="zeuszhou.xyz/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TS总结（一）</title>
    <link href="zeuszhou.xyz/TypeScript/TS%E6%80%BB%E7%BB%93/"/>
    <id>zeuszhou.xyz/TypeScript/TS总结/</id>
    <published>2020-05-27T07:58:59.000Z</published>
    <updated>2020-05-28T06:33:45.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>codereview被ts搞得非常痛苦，需要好好学习一个</p><p>TS是静态类型化的js超集，静态性使其牛逼<br>语言在编译时报错是静态语言，运行时报错时动态语言<br>TS是静态弱类型语言，不是强类型，因为要兼容js，不限制js的隐式类型转换</p><p>使用TS的优点：</p><ul><li>可以避免低级错误，在编写时就能发现</li><li>减少多人合作的成本，适合大项目</li><li>良好的代码提示</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>TS的原始类型：</p><ol><li>boolean</li><li>number</li><li>string</li><li>null</li><li>undefined</li><li>symbol</li><li>void</li><li>bigint<br><strong>与js类型的区别</strong>，多了void和bigint，且都是小写开头</li></ol><p>TS的其他常见类型：</p><ol><li>any：不到万不得已，不要用，和js没有多少区别</li><li>unknown：any的安全类型，unknown类型值操作之前，要进行检查，而any不用。虽然可以是任何类型，但unknown不能被进行任何操作比如对象取值等等。可以用来缩小类型范围</li><li>never：永不存在的值的类型，任何类型的子类型，可以赋值给任何类型，但没有类型可以赋值给never（除了自己），也没有never的子类型。用于定义永远是空的数组，永远不会有返回值的函数，比如抛出异常。</li><li>数组：范型定义（const list: Array<number> = [1,2,3])，元素类型加[]，(const list: number[] = [1,2,3])</number></li><li>元组：严格版数组，但是元素的类型可以不同，let x: [string, number] = [‘hello’, 12]，元组可以push添加元素，但不能访问</li><li>object：普通对象，数组，枚举，元组都是object类型</li><li>枚举：声明一组命名的常数</li></ol><ul><li>数字枚举从0开始，依次加1，累加效应</li><li>字符串枚举可以用方括号取值（需要加双引号）也可以用点号取值</li><li>异构枚举，前两者混合，也可以但少见</li><li>正反向映射，可以用枚举名字取枚举值，也能用枚举值取枚举名字，原理是Direction[Direction[“Up”] = 10] = “Up”，所以up或者10都能取到</li><li>常量枚举，Up = ‘Up’，好处在于编译成js之后，直接省略了枚举，是性能提升的一个方案</li><li>字面量类型的情况，枚举的成员和枚举值可以当成类型使用</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>interface只能用于定义对象类型<br>可选属性：后面加?，可能是undefined<br>只读属性：前面加readonly，修改会给出警告<br>可索引类型：可以用来表示{北京：1}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Phone &#123;</span><br><span class="line">    [name: string]: string</span><br><span class="line">&#125;</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string <span class="comment">// 普通</span></span><br><span class="line">    age?: number  <span class="comment">// 可选属性</span></span><br><span class="line">    readonly isMale: boolean <span class="comment">//只读属性</span></span><br><span class="line">    say: <span class="function"><span class="params">()</span> =&gt;</span> string <span class="comment">// 函数属性</span></span><br><span class="line">    phone: Phone <span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>extends可以继承接口，在父接口的基础上，加上新的属性</p><h3 id="类和函数"><a href="#类和函数" class="headerlink" title="类和函数"></a>类和函数</h3><ol><li>abstract抽象类，无法实例化，被继承</li><li>public都能访问，private只能类内访问，protected只能类内和子类访问</li><li>类也可以作为接口</li><li>函数可以重载</li></ol><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>定义：在静态编写时不知道传入的参数到底是什么类型，只有在运行时传入参数才能确定，所以我们需要变量代表传入的类型，再返回这个变量，只用于表示类型而不表示值</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125; <span class="keyword">as</span> Person</span><br></pre></td></tr></table></figure><p>双重断言，先断成any再断成自己想要的</p><h3 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">arg: person | animal</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg <span class="keyword">instanceof</span> person)&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'age'</span> <span class="keyword">in</span> arg)&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arg.kind === <span class="string">'foo'</span>)&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>联合类型：中间用｜隔开，表示这些类型都可以</p><p>交叉类型：const result = <t &="" u="">{}</t></p><p>类型别名：type some = boolean | string</p><h3 id="React实战"><a href="#React实战" class="headerlink" title="React实战"></a>React实战</h3><ol><li>React.FC可以无需声明children属性的类型，会为props自动加上</li><li>input的onchange，e的类型为React.ChangeEvent<htmlinputelement>，就可以用e.target.value了</htmlinputelement></li><li>表单的submit，e的类型为React.FormEvent<htmlformelement></htmlformelement></li><li>当我们在组件中输入事件对应的名称时，会有相关的定义提示，我们只要用这个提示中的类型就可以了</li></ol><h3 id="索引类型查询"><a href="#索引类型查询" class="headerlink" title="索引类型查询"></a>索引类型查询</h3><p>keyof可以作用于泛型，来获取泛型所有的属性名构成联合属性<br>keyof可以取到索引类型的属性名，但还要获取属性值的类型，所以需要索引访问符，T[K]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Images</span> </span>&#123;</span><br><span class="line">    public src: string = <span class="string">'https://www.google.com.hk/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png'</span></span><br><span class="line">    public alt: string = <span class="string">'谷歌'</span></span><br><span class="line">    public width: number = <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line">type propsNames = keyof Images <span class="comment">// src | alt | width</span></span><br><span class="line">type propsType = Images[propsNames] <span class="comment">// string | number</span></span><br><span class="line"></span><br><span class="line">function pick&lt;T, K extends keyof T&gt;(o: T, names: K[]): T[K][] &#123;</span><br><span class="line">    <span class="keyword">return</span> names.map(<span class="function"><span class="params">n</span> =&gt;</span> o[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = pick(user, [<span class="string">'token'</span>, <span class="string">'id'</span>, ])</span><br></pre></td></tr></table></figure><p>pick的例子，需要一个泛型T表示传入参数o的类型，因为编写时无法确定o是什么类型，第二个参数names表示数组的成员必须由参数o的属性名称构成，所以用keyof代表o类型的属性名的联合类型，所以用K约束到keyof T。返回值T[K]取到对应属性值的类型，T[K][]表示返回值的类型</p><h3 id="映射类型把接口成员都变成可选"><a href="#映射类型把接口成员都变成可选" class="headerlink" title="映射类型把接口成员都变成可选"></a>映射类型把接口成员都变成可选</h3><ol><li>一个一个在成员前加?</li><li>映射法</li></ol><p>语法：[K in Keys]<br>K对应每个属性名的类型，Keys表示一组属性名的类型，所以[K in keyof T]表示属性的类型，T[K]表示属性值的类型<br>结果：type partial<t> = { [K in keyof T]?: T[K] }</t></p><p>Q：找到一个接口中value为function的key和value<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FunctionPropertyNames&lt;T&gt; = &#123; [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> <span class="built_in">Function</span> ? K : never &#125;[keyof T]</span><br></pre></td></tr></table></figure></p><p>Partial可以把外层的属性都变成可选。处理深层需要递归<br>-?把可选属性变成必选，-readonly把只读属性变成非只读<br>Required把传入的属性变成必选项<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Partial&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] &#125;;</span><br><span class="line"></span><br><span class="line">type DeepPartial&lt;T&gt; = &#123;</span><br><span class="line">    [U <span class="keyword">in</span> keyof T]?: T[U] extends object</span><br><span class="line">    ? DeepPartial&lt;T[U]&gt;</span><br><span class="line">    : T[U]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Required&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]-?: T[P] &#125;;</span><br></pre></td></tr></table></figure></p><h3 id="常见工具类型"><a href="#常见工具类型" class="headerlink" title="常见工具类型"></a>常见工具类型</h3><ul><li>Pick</li><li>Exclude</li><li>Omit</li><li>Compute</li><li>Merge</li><li>Intersection</li><li>Overwrite</li><li>Mutable<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T;</span><br><span class="line"><span class="keyword">type</span> T = Exclude&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span> | <span class="number">3</span>&gt; <span class="comment">// -&gt; 2  从T中排除出可分配给U的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Omit&lt;T, K&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</span><br><span class="line"><span class="keyword">type</span> Foo = Omit&lt;&#123;name: <span class="built_in">string</span>, age: <span class="built_in">number</span>&#125;, <span class="string">'name'</span>&gt; <span class="comment">// -&gt; &#123; age: number &#125; Omit忽略T中的某些属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Compute&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>&gt; = A <span class="keyword">extends</span> <span class="built_in">Function</span> ? A : &#123; [K <span class="keyword">in</span> keyof A]: A[K] &#125; <span class="comment">// compute将交叉类型合并</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Merge&lt;O1 <span class="keyword">extends</span> object, O2 <span class="keyword">extends</span> object&gt; = Compute&lt;O1 &amp; Omit&lt;O2, keyof O1&gt;&gt; <span class="comment">// merge将两个对象的属性合并</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Intersection&lt;T <span class="keyword">extends</span> object, U <span class="keyword">extends</span> object&gt; = </span><br><span class="line">Pick&lt;T,Extract&lt;keyof T, keyof U&gt; &amp; Extract&lt;keyof U, keyof T&gt;&gt;;  <span class="comment">// Intersection取交集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Overwrite&lt;</span><br><span class="line">  T <span class="keyword">extends</span> object,</span><br><span class="line">  U <span class="keyword">extends</span> object,</span><br><span class="line">  I = Diff&lt;T, U&gt; &amp; Intersection&lt;U, T&gt;</span><br><span class="line">&gt; = Pick&lt;I, keyof I&gt;; <span class="comment">// 用U的属性覆盖T的相同属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Mutable&lt;T&gt; = &#123;</span><br><span class="line">  -readonly [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125; <span class="comment">// 将T的所有属性的readonly移除</span></span><br></pre></td></tr></table></figure></li></ul><p>record允许从Union中创建新类型<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = <span class="string">'Audi'</span> | <span class="string">'BMW'</span> | <span class="string">'MercedesBenz'</span></span><br><span class="line"><span class="keyword">type</span> CarList = Record&lt;Car, &#123;age: <span class="built_in">number</span>&#125;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cars: CarList = &#123;</span><br><span class="line">    Audi: &#123; age: <span class="number">119</span> &#125;,</span><br><span class="line">    BMW: &#123; age: <span class="number">113</span> &#125;,</span><br><span class="line">    MercedesBenz: &#123; age: <span class="number">133</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在tsx，如果<t>泛型被当成jsx标签，可以加上<t extends="" {}=""></t></t></p><h3 id="TS的编译原理"><a href="#TS的编译原理" class="headerlink" title="TS的编译原理"></a>TS的编译原理</h3><p>编译器的组成：</p><ol><li>Scanner扫描器</li><li>Parser解析器</li><li>Binder绑定器</li><li>Emitter发射器</li><li>Checker检查器</li></ol><p>处理过程：</p><ol><li>code + 扫描器 = token流 （词法分析）</li><li>token流 + 解析器 = AST抽象语法树 （语法分析）</li><li>AST + 绑定器 = Symbols符号 （语义分析）</li><li>AST + 符号 + 检查器 = 类型验证 （代码优化）</li><li>AST + 检查器 + 发射器 = JS代码 （目标代码生成）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;codereview被ts搞得非常痛苦，需要好好学习一个&lt;/p&gt;
&lt;p&gt;TS是静态类型化的js超集，静态性使其牛逼&lt;br&gt;语言在编译时报错是
      
    
    </summary>
    
      <category term="TypeScript" scheme="zeuszhou.xyz/categories/TypeScript/"/>
    
    
      <category term="TypeScript" scheme="zeuszhou.xyz/tags/TypeScript/"/>
    
  </entry>
  
</feed>
